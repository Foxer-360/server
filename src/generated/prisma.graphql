# source: http://localhost:4466
# timestamp: Mon Feb 11 2019 16:58:18 GMT+0100 (CET)

type AggregateDatasource {
  count: Int!
}

type AggregateDatasourceItem {
  count: Int!
}

type AggregateFile {
  count: Int!
}

type AggregateInquiry {
  count: Int!
}

type AggregateLanguage {
  count: Int!
}

type AggregateNavigation {
  count: Int!
}

type AggregateNavigationNode {
  count: Int!
}

type AggregatePage {
  count: Int!
}

type AggregatePageChat {
  count: Int!
}

type AggregatePagePlugin {
  count: Int!
}

type AggregatePageTask {
  count: Int!
}

type AggregatePageTranslation {
  count: Int!
}

type AggregatePageType {
  count: Int!
}

type AggregateProject {
  count: Int!
}

type AggregateSubscriber {
  count: Int!
}

type AggregateTag {
  count: Int!
}

type AggregateWebsite {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Datasource implements Node {
  id: ID!
  type: String!
  schema: Json!
  uiSchema: Json
  displayInNavigation: Boolean
  slug: [String!]!
  datasourceItems(where: DatasourceItemWhereInput, orderBy: DatasourceItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DatasourceItem!]
  page(where: PageWhereInput, orderBy: PageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Page!]
}

"""A connection to a list of items."""
type DatasourceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DatasourceEdge]!
  aggregate: AggregateDatasource!
}

input DatasourceCreateInput {
  type: String!
  schema: Json!
  uiSchema: Json
  displayInNavigation: Boolean
  slug: DatasourceCreateslugInput
  datasourceItems: DatasourceItemCreateManyWithoutDatasourceInput
  page: PageCreateManyWithoutDatasourcesInput
}

input DatasourceCreateManyWithoutPageInput {
  create: [DatasourceCreateWithoutPageInput!]
  connect: [DatasourceWhereUniqueInput!]
}

input DatasourceCreateOneWithoutDatasourceItemsInput {
  create: DatasourceCreateWithoutDatasourceItemsInput
  connect: DatasourceWhereUniqueInput
}

input DatasourceCreateslugInput {
  set: [String!]
}

input DatasourceCreateWithoutDatasourceItemsInput {
  type: String!
  schema: Json!
  uiSchema: Json
  displayInNavigation: Boolean
  slug: DatasourceCreateslugInput
  page: PageCreateManyWithoutDatasourcesInput
}

input DatasourceCreateWithoutPageInput {
  type: String!
  schema: Json!
  uiSchema: Json
  displayInNavigation: Boolean
  slug: DatasourceCreateslugInput
  datasourceItems: DatasourceItemCreateManyWithoutDatasourceInput
}

"""An edge in a connection."""
type DatasourceEdge {
  """The item at the end of the edge."""
  node: Datasource!

  """A cursor for use in pagination."""
  cursor: String!
}

type DatasourceItem implements Node {
  id: ID!
  datasource(where: DatasourceWhereInput): Datasource!
  slug: String!
  content: Json!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type DatasourceItemConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DatasourceItemEdge]!
  aggregate: AggregateDatasourceItem!
}

input DatasourceItemCreateInput {
  slug: String!
  content: Json!
  datasource: DatasourceCreateOneWithoutDatasourceItemsInput!
}

input DatasourceItemCreateManyWithoutDatasourceInput {
  create: [DatasourceItemCreateWithoutDatasourceInput!]
  connect: [DatasourceItemWhereUniqueInput!]
}

input DatasourceItemCreateWithoutDatasourceInput {
  slug: String!
  content: Json!
}

"""An edge in a connection."""
type DatasourceItemEdge {
  """The item at the end of the edge."""
  node: DatasourceItem!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DatasourceItemOrderByInput {
  id_ASC
  id_DESC
  slug_ASC
  slug_DESC
  content_ASC
  content_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DatasourceItemPreviousValues {
  id: ID!
  slug: String!
  content: Json!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type DatasourceItemSubscriptionPayload {
  mutation: MutationType!
  node: DatasourceItem
  updatedFields: [String!]
  previousValues: DatasourceItemPreviousValues
}

input DatasourceItemSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DatasourceItemSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DatasourceItemSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DatasourceItemSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DatasourceItemWhereInput
}

input DatasourceItemUpdateInput {
  slug: String
  content: Json
  datasource: DatasourceUpdateOneWithoutDatasourceItemsInput
}

input DatasourceItemUpdateManyWithoutDatasourceInput {
  create: [DatasourceItemCreateWithoutDatasourceInput!]
  connect: [DatasourceItemWhereUniqueInput!]
  disconnect: [DatasourceItemWhereUniqueInput!]
  delete: [DatasourceItemWhereUniqueInput!]
  update: [DatasourceItemUpdateWithWhereUniqueWithoutDatasourceInput!]
  upsert: [DatasourceItemUpsertWithWhereUniqueWithoutDatasourceInput!]
}

input DatasourceItemUpdateWithoutDatasourceDataInput {
  slug: String
  content: Json
}

input DatasourceItemUpdateWithWhereUniqueWithoutDatasourceInput {
  where: DatasourceItemWhereUniqueInput!
  data: DatasourceItemUpdateWithoutDatasourceDataInput!
}

input DatasourceItemUpsertWithWhereUniqueWithoutDatasourceInput {
  where: DatasourceItemWhereUniqueInput!
  update: DatasourceItemUpdateWithoutDatasourceDataInput!
  create: DatasourceItemCreateWithoutDatasourceInput!
}

input DatasourceItemWhereInput {
  """Logical AND on all given filters."""
  AND: [DatasourceItemWhereInput!]

  """Logical OR on all given filters."""
  OR: [DatasourceItemWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DatasourceItemWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  slug: String

  """All values that are not equal to given value."""
  slug_not: String

  """All values that are contained in given list."""
  slug_in: [String!]

  """All values that are not contained in given list."""
  slug_not_in: [String!]

  """All values less than the given value."""
  slug_lt: String

  """All values less than or equal the given value."""
  slug_lte: String

  """All values greater than the given value."""
  slug_gt: String

  """All values greater than or equal the given value."""
  slug_gte: String

  """All values containing the given string."""
  slug_contains: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values starting with the given string."""
  slug_starts_with: String

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values not ending with the given string."""
  slug_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  datasource: DatasourceWhereInput
}

input DatasourceItemWhereUniqueInput {
  id: ID
}

enum DatasourceOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  schema_ASC
  schema_DESC
  uiSchema_ASC
  uiSchema_DESC
  displayInNavigation_ASC
  displayInNavigation_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type DatasourcePreviousValues {
  id: ID!
  type: String!
  schema: Json!
  uiSchema: Json
  displayInNavigation: Boolean
  slug: [String!]!
}

type DatasourceSubscriptionPayload {
  mutation: MutationType!
  node: Datasource
  updatedFields: [String!]
  previousValues: DatasourcePreviousValues
}

input DatasourceSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DatasourceSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DatasourceSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DatasourceSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DatasourceWhereInput
}

input DatasourceUpdateInput {
  type: String
  schema: Json
  uiSchema: Json
  displayInNavigation: Boolean
  slug: DatasourceUpdateslugInput
  datasourceItems: DatasourceItemUpdateManyWithoutDatasourceInput
  page: PageUpdateManyWithoutDatasourcesInput
}

input DatasourceUpdateManyWithoutPageInput {
  create: [DatasourceCreateWithoutPageInput!]
  connect: [DatasourceWhereUniqueInput!]
  disconnect: [DatasourceWhereUniqueInput!]
  delete: [DatasourceWhereUniqueInput!]
  update: [DatasourceUpdateWithWhereUniqueWithoutPageInput!]
  upsert: [DatasourceUpsertWithWhereUniqueWithoutPageInput!]
}

input DatasourceUpdateOneWithoutDatasourceItemsInput {
  create: DatasourceCreateWithoutDatasourceItemsInput
  connect: DatasourceWhereUniqueInput
  delete: Boolean
  update: DatasourceUpdateWithoutDatasourceItemsDataInput
  upsert: DatasourceUpsertWithoutDatasourceItemsInput
}

input DatasourceUpdateslugInput {
  set: [String!]
}

input DatasourceUpdateWithoutDatasourceItemsDataInput {
  type: String
  schema: Json
  uiSchema: Json
  displayInNavigation: Boolean
  slug: DatasourceUpdateslugInput
  page: PageUpdateManyWithoutDatasourcesInput
}

input DatasourceUpdateWithoutPageDataInput {
  type: String
  schema: Json
  uiSchema: Json
  displayInNavigation: Boolean
  slug: DatasourceUpdateslugInput
  datasourceItems: DatasourceItemUpdateManyWithoutDatasourceInput
}

input DatasourceUpdateWithWhereUniqueWithoutPageInput {
  where: DatasourceWhereUniqueInput!
  data: DatasourceUpdateWithoutPageDataInput!
}

input DatasourceUpsertWithoutDatasourceItemsInput {
  update: DatasourceUpdateWithoutDatasourceItemsDataInput!
  create: DatasourceCreateWithoutDatasourceItemsInput!
}

input DatasourceUpsertWithWhereUniqueWithoutPageInput {
  where: DatasourceWhereUniqueInput!
  update: DatasourceUpdateWithoutPageDataInput!
  create: DatasourceCreateWithoutPageInput!
}

input DatasourceWhereInput {
  """Logical AND on all given filters."""
  AND: [DatasourceWhereInput!]

  """Logical OR on all given filters."""
  OR: [DatasourceWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DatasourceWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  type: String

  """All values that are not equal to given value."""
  type_not: String

  """All values that are contained in given list."""
  type_in: [String!]

  """All values that are not contained in given list."""
  type_not_in: [String!]

  """All values less than the given value."""
  type_lt: String

  """All values less than or equal the given value."""
  type_lte: String

  """All values greater than the given value."""
  type_gt: String

  """All values greater than or equal the given value."""
  type_gte: String

  """All values containing the given string."""
  type_contains: String

  """All values not containing the given string."""
  type_not_contains: String

  """All values starting with the given string."""
  type_starts_with: String

  """All values not starting with the given string."""
  type_not_starts_with: String

  """All values ending with the given string."""
  type_ends_with: String

  """All values not ending with the given string."""
  type_not_ends_with: String
  displayInNavigation: Boolean

  """All values that are not equal to given value."""
  displayInNavigation_not: Boolean
  datasourceItems_every: DatasourceItemWhereInput
  datasourceItems_some: DatasourceItemWhereInput
  datasourceItems_none: DatasourceItemWhereInput
  page_every: PageWhereInput
  page_some: PageWhereInput
  page_none: PageWhereInput
}

input DatasourceWhereUniqueInput {
  id: ID
}

scalar DateTime

type File implements Node {
  id: ID!
  hash: String!
  category: String
  filename: String!
  mimetype: String
  size: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type FileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FileEdge]!
  aggregate: AggregateFile!
}

input FileCreateInput {
  hash: String!
  category: String
  filename: String!
  mimetype: String
  size: Int
}

"""An edge in a connection."""
type FileEdge {
  """The item at the end of the edge."""
  node: File!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FileOrderByInput {
  id_ASC
  id_DESC
  hash_ASC
  hash_DESC
  category_ASC
  category_DESC
  filename_ASC
  filename_DESC
  mimetype_ASC
  mimetype_DESC
  size_ASC
  size_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type FilePreviousValues {
  id: ID!
  hash: String!
  category: String
  filename: String!
  mimetype: String
  size: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

type FileSubscriptionPayload {
  mutation: MutationType!
  node: File
  updatedFields: [String!]
  previousValues: FilePreviousValues
}

input FileSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FileSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FileSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FileSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FileWhereInput
}

input FileUpdateInput {
  hash: String
  category: String
  filename: String
  mimetype: String
  size: Int
}

input FileWhereInput {
  """Logical AND on all given filters."""
  AND: [FileWhereInput!]

  """Logical OR on all given filters."""
  OR: [FileWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FileWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  hash: String

  """All values that are not equal to given value."""
  hash_not: String

  """All values that are contained in given list."""
  hash_in: [String!]

  """All values that are not contained in given list."""
  hash_not_in: [String!]

  """All values less than the given value."""
  hash_lt: String

  """All values less than or equal the given value."""
  hash_lte: String

  """All values greater than the given value."""
  hash_gt: String

  """All values greater than or equal the given value."""
  hash_gte: String

  """All values containing the given string."""
  hash_contains: String

  """All values not containing the given string."""
  hash_not_contains: String

  """All values starting with the given string."""
  hash_starts_with: String

  """All values not starting with the given string."""
  hash_not_starts_with: String

  """All values ending with the given string."""
  hash_ends_with: String

  """All values not ending with the given string."""
  hash_not_ends_with: String
  category: String

  """All values that are not equal to given value."""
  category_not: String

  """All values that are contained in given list."""
  category_in: [String!]

  """All values that are not contained in given list."""
  category_not_in: [String!]

  """All values less than the given value."""
  category_lt: String

  """All values less than or equal the given value."""
  category_lte: String

  """All values greater than the given value."""
  category_gt: String

  """All values greater than or equal the given value."""
  category_gte: String

  """All values containing the given string."""
  category_contains: String

  """All values not containing the given string."""
  category_not_contains: String

  """All values starting with the given string."""
  category_starts_with: String

  """All values not starting with the given string."""
  category_not_starts_with: String

  """All values ending with the given string."""
  category_ends_with: String

  """All values not ending with the given string."""
  category_not_ends_with: String
  filename: String

  """All values that are not equal to given value."""
  filename_not: String

  """All values that are contained in given list."""
  filename_in: [String!]

  """All values that are not contained in given list."""
  filename_not_in: [String!]

  """All values less than the given value."""
  filename_lt: String

  """All values less than or equal the given value."""
  filename_lte: String

  """All values greater than the given value."""
  filename_gt: String

  """All values greater than or equal the given value."""
  filename_gte: String

  """All values containing the given string."""
  filename_contains: String

  """All values not containing the given string."""
  filename_not_contains: String

  """All values starting with the given string."""
  filename_starts_with: String

  """All values not starting with the given string."""
  filename_not_starts_with: String

  """All values ending with the given string."""
  filename_ends_with: String

  """All values not ending with the given string."""
  filename_not_ends_with: String
  mimetype: String

  """All values that are not equal to given value."""
  mimetype_not: String

  """All values that are contained in given list."""
  mimetype_in: [String!]

  """All values that are not contained in given list."""
  mimetype_not_in: [String!]

  """All values less than the given value."""
  mimetype_lt: String

  """All values less than or equal the given value."""
  mimetype_lte: String

  """All values greater than the given value."""
  mimetype_gt: String

  """All values greater than or equal the given value."""
  mimetype_gte: String

  """All values containing the given string."""
  mimetype_contains: String

  """All values not containing the given string."""
  mimetype_not_contains: String

  """All values starting with the given string."""
  mimetype_starts_with: String

  """All values not starting with the given string."""
  mimetype_not_starts_with: String

  """All values ending with the given string."""
  mimetype_ends_with: String

  """All values not ending with the given string."""
  mimetype_not_ends_with: String
  size: Int

  """All values that are not equal to given value."""
  size_not: Int

  """All values that are contained in given list."""
  size_in: [Int!]

  """All values that are not contained in given list."""
  size_not_in: [Int!]

  """All values less than the given value."""
  size_lt: Int

  """All values less than or equal the given value."""
  size_lte: Int

  """All values greater than the given value."""
  size_gt: Int

  """All values greater than or equal the given value."""
  size_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

input FileWhereUniqueInput {
  id: ID
  hash: String
}

type Inquiry implements Node {
  id: ID!
  message: Json!
  url: String
  createdAt: DateTime!
  formType: String
  ip: String
}

"""A connection to a list of items."""
type InquiryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [InquiryEdge]!
  aggregate: AggregateInquiry!
}

input InquiryCreateInput {
  message: Json!
  url: String
  formType: String
  ip: String
}

"""An edge in a connection."""
type InquiryEdge {
  """The item at the end of the edge."""
  node: Inquiry!

  """A cursor for use in pagination."""
  cursor: String!
}

enum InquiryOrderByInput {
  id_ASC
  id_DESC
  message_ASC
  message_DESC
  url_ASC
  url_DESC
  createdAt_ASC
  createdAt_DESC
  formType_ASC
  formType_DESC
  ip_ASC
  ip_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type InquiryPreviousValues {
  id: ID!
  message: Json!
  url: String
  createdAt: DateTime!
  formType: String
  ip: String
}

type InquirySubscriptionPayload {
  mutation: MutationType!
  node: Inquiry
  updatedFields: [String!]
  previousValues: InquiryPreviousValues
}

input InquirySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [InquirySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [InquirySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InquirySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: InquiryWhereInput
}

input InquiryUpdateInput {
  message: Json
  url: String
  formType: String
  ip: String
}

input InquiryWhereInput {
  """Logical AND on all given filters."""
  AND: [InquiryWhereInput!]

  """Logical OR on all given filters."""
  OR: [InquiryWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InquiryWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  formType: String

  """All values that are not equal to given value."""
  formType_not: String

  """All values that are contained in given list."""
  formType_in: [String!]

  """All values that are not contained in given list."""
  formType_not_in: [String!]

  """All values less than the given value."""
  formType_lt: String

  """All values less than or equal the given value."""
  formType_lte: String

  """All values greater than the given value."""
  formType_gt: String

  """All values greater than or equal the given value."""
  formType_gte: String

  """All values containing the given string."""
  formType_contains: String

  """All values not containing the given string."""
  formType_not_contains: String

  """All values starting with the given string."""
  formType_starts_with: String

  """All values not starting with the given string."""
  formType_not_starts_with: String

  """All values ending with the given string."""
  formType_ends_with: String

  """All values not ending with the given string."""
  formType_not_ends_with: String
  ip: String

  """All values that are not equal to given value."""
  ip_not: String

  """All values that are contained in given list."""
  ip_in: [String!]

  """All values that are not contained in given list."""
  ip_not_in: [String!]

  """All values less than the given value."""
  ip_lt: String

  """All values less than or equal the given value."""
  ip_lte: String

  """All values greater than the given value."""
  ip_gt: String

  """All values greater than or equal the given value."""
  ip_gte: String

  """All values containing the given string."""
  ip_contains: String

  """All values not containing the given string."""
  ip_not_contains: String

  """All values starting with the given string."""
  ip_starts_with: String

  """All values not starting with the given string."""
  ip_not_starts_with: String

  """All values ending with the given string."""
  ip_ends_with: String

  """All values not ending with the given string."""
  ip_not_ends_with: String
}

input InquiryWhereUniqueInput {
  id: ID
}

"""Raw JSON value"""
scalar Json

type Language implements Node {
  id: ID!
  code: String!
  name: String!
  englishName: String!
  isDefault: Boolean!
  isEnabled: Boolean!
}

"""A connection to a list of items."""
type LanguageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LanguageEdge]!
  aggregate: AggregateLanguage!
}

input LanguageCreateInput {
  code: String!
  name: String!
  englishName: String!
  isDefault: Boolean
  isEnabled: Boolean
}

input LanguageCreateManyInput {
  create: [LanguageCreateInput!]
  connect: [LanguageWhereUniqueInput!]
}

input LanguageCreateOneInput {
  create: LanguageCreateInput
  connect: LanguageWhereUniqueInput
}

"""An edge in a connection."""
type LanguageEdge {
  """The item at the end of the edge."""
  node: Language!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LanguageOrderByInput {
  id_ASC
  id_DESC
  code_ASC
  code_DESC
  name_ASC
  name_DESC
  englishName_ASC
  englishName_DESC
  isDefault_ASC
  isDefault_DESC
  isEnabled_ASC
  isEnabled_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type LanguagePreviousValues {
  id: ID!
  code: String!
  name: String!
  englishName: String!
  isDefault: Boolean!
  isEnabled: Boolean!
}

type LanguageSubscriptionPayload {
  mutation: MutationType!
  node: Language
  updatedFields: [String!]
  previousValues: LanguagePreviousValues
}

input LanguageSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LanguageSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LanguageSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LanguageSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LanguageWhereInput
}

input LanguageUpdateDataInput {
  code: String
  name: String
  englishName: String
  isDefault: Boolean
  isEnabled: Boolean
}

input LanguageUpdateInput {
  code: String
  name: String
  englishName: String
  isDefault: Boolean
  isEnabled: Boolean
}

input LanguageUpdateManyInput {
  create: [LanguageCreateInput!]
  connect: [LanguageWhereUniqueInput!]
  disconnect: [LanguageWhereUniqueInput!]
  delete: [LanguageWhereUniqueInput!]
  update: [LanguageUpdateWithWhereUniqueNestedInput!]
  upsert: [LanguageUpsertWithWhereUniqueNestedInput!]
}

input LanguageUpdateOneInput {
  create: LanguageCreateInput
  connect: LanguageWhereUniqueInput
  delete: Boolean
  update: LanguageUpdateDataInput
  upsert: LanguageUpsertNestedInput
}

input LanguageUpdateWithWhereUniqueNestedInput {
  where: LanguageWhereUniqueInput!
  data: LanguageUpdateDataInput!
}

input LanguageUpsertNestedInput {
  update: LanguageUpdateDataInput!
  create: LanguageCreateInput!
}

input LanguageUpsertWithWhereUniqueNestedInput {
  where: LanguageWhereUniqueInput!
  update: LanguageUpdateDataInput!
  create: LanguageCreateInput!
}

input LanguageWhereInput {
  """Logical AND on all given filters."""
  AND: [LanguageWhereInput!]

  """Logical OR on all given filters."""
  OR: [LanguageWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LanguageWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  code: String

  """All values that are not equal to given value."""
  code_not: String

  """All values that are contained in given list."""
  code_in: [String!]

  """All values that are not contained in given list."""
  code_not_in: [String!]

  """All values less than the given value."""
  code_lt: String

  """All values less than or equal the given value."""
  code_lte: String

  """All values greater than the given value."""
  code_gt: String

  """All values greater than or equal the given value."""
  code_gte: String

  """All values containing the given string."""
  code_contains: String

  """All values not containing the given string."""
  code_not_contains: String

  """All values starting with the given string."""
  code_starts_with: String

  """All values not starting with the given string."""
  code_not_starts_with: String

  """All values ending with the given string."""
  code_ends_with: String

  """All values not ending with the given string."""
  code_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  englishName: String

  """All values that are not equal to given value."""
  englishName_not: String

  """All values that are contained in given list."""
  englishName_in: [String!]

  """All values that are not contained in given list."""
  englishName_not_in: [String!]

  """All values less than the given value."""
  englishName_lt: String

  """All values less than or equal the given value."""
  englishName_lte: String

  """All values greater than the given value."""
  englishName_gt: String

  """All values greater than or equal the given value."""
  englishName_gte: String

  """All values containing the given string."""
  englishName_contains: String

  """All values not containing the given string."""
  englishName_not_contains: String

  """All values starting with the given string."""
  englishName_starts_with: String

  """All values not starting with the given string."""
  englishName_not_starts_with: String

  """All values ending with the given string."""
  englishName_ends_with: String

  """All values not ending with the given string."""
  englishName_not_ends_with: String
  isDefault: Boolean

  """All values that are not equal to given value."""
  isDefault_not: Boolean
  isEnabled: Boolean

  """All values that are not equal to given value."""
  isEnabled_not: Boolean
}

input LanguageWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createProject(data: ProjectCreateInput!): Project!
  createPageTranslation(data: PageTranslationCreateInput!): PageTranslation!
  createPagePlugin(data: PagePluginCreateInput!): PagePlugin!
  createPageTask(data: PageTaskCreateInput!): PageTask!
  createPageChat(data: PageChatCreateInput!): PageChat!
  createFile(data: FileCreateInput!): File!
  createNavigation(data: NavigationCreateInput!): Navigation!
  createNavigationNode(data: NavigationNodeCreateInput!): NavigationNode!
  createTag(data: TagCreateInput!): Tag!
  createSubscriber(data: SubscriberCreateInput!): Subscriber!
  createInquiry(data: InquiryCreateInput!): Inquiry!
  createDatasource(data: DatasourceCreateInput!): Datasource!
  createDatasourceItem(data: DatasourceItemCreateInput!): DatasourceItem!
  createPage(data: PageCreateInput!): Page!
  createPageType(data: PageTypeCreateInput!): PageType!
  createWebsite(data: WebsiteCreateInput!): Website!
  createLanguage(data: LanguageCreateInput!): Language!
  updateProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
  updatePageTranslation(data: PageTranslationUpdateInput!, where: PageTranslationWhereUniqueInput!): PageTranslation
  updatePagePlugin(data: PagePluginUpdateInput!, where: PagePluginWhereUniqueInput!): PagePlugin
  updatePageTask(data: PageTaskUpdateInput!, where: PageTaskWhereUniqueInput!): PageTask
  updatePageChat(data: PageChatUpdateInput!, where: PageChatWhereUniqueInput!): PageChat
  updateFile(data: FileUpdateInput!, where: FileWhereUniqueInput!): File
  updateNavigation(data: NavigationUpdateInput!, where: NavigationWhereUniqueInput!): Navigation
  updateNavigationNode(data: NavigationNodeUpdateInput!, where: NavigationNodeWhereUniqueInput!): NavigationNode
  updateTag(data: TagUpdateInput!, where: TagWhereUniqueInput!): Tag
  updateSubscriber(data: SubscriberUpdateInput!, where: SubscriberWhereUniqueInput!): Subscriber
  updateInquiry(data: InquiryUpdateInput!, where: InquiryWhereUniqueInput!): Inquiry
  updateDatasource(data: DatasourceUpdateInput!, where: DatasourceWhereUniqueInput!): Datasource
  updateDatasourceItem(data: DatasourceItemUpdateInput!, where: DatasourceItemWhereUniqueInput!): DatasourceItem
  updatePage(data: PageUpdateInput!, where: PageWhereUniqueInput!): Page
  updatePageType(data: PageTypeUpdateInput!, where: PageTypeWhereUniqueInput!): PageType
  updateWebsite(data: WebsiteUpdateInput!, where: WebsiteWhereUniqueInput!): Website
  updateLanguage(data: LanguageUpdateInput!, where: LanguageWhereUniqueInput!): Language
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deletePageTranslation(where: PageTranslationWhereUniqueInput!): PageTranslation
  deletePagePlugin(where: PagePluginWhereUniqueInput!): PagePlugin
  deletePageTask(where: PageTaskWhereUniqueInput!): PageTask
  deletePageChat(where: PageChatWhereUniqueInput!): PageChat
  deleteFile(where: FileWhereUniqueInput!): File
  deleteNavigation(where: NavigationWhereUniqueInput!): Navigation
  deleteNavigationNode(where: NavigationNodeWhereUniqueInput!): NavigationNode
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteSubscriber(where: SubscriberWhereUniqueInput!): Subscriber
  deleteInquiry(where: InquiryWhereUniqueInput!): Inquiry
  deleteDatasource(where: DatasourceWhereUniqueInput!): Datasource
  deleteDatasourceItem(where: DatasourceItemWhereUniqueInput!): DatasourceItem
  deletePage(where: PageWhereUniqueInput!): Page
  deletePageType(where: PageTypeWhereUniqueInput!): PageType
  deleteWebsite(where: WebsiteWhereUniqueInput!): Website
  deleteLanguage(where: LanguageWhereUniqueInput!): Language
  upsertProject(where: ProjectWhereUniqueInput!, create: ProjectCreateInput!, update: ProjectUpdateInput!): Project!
  upsertPageTranslation(where: PageTranslationWhereUniqueInput!, create: PageTranslationCreateInput!, update: PageTranslationUpdateInput!): PageTranslation!
  upsertPagePlugin(where: PagePluginWhereUniqueInput!, create: PagePluginCreateInput!, update: PagePluginUpdateInput!): PagePlugin!
  upsertPageTask(where: PageTaskWhereUniqueInput!, create: PageTaskCreateInput!, update: PageTaskUpdateInput!): PageTask!
  upsertPageChat(where: PageChatWhereUniqueInput!, create: PageChatCreateInput!, update: PageChatUpdateInput!): PageChat!
  upsertFile(where: FileWhereUniqueInput!, create: FileCreateInput!, update: FileUpdateInput!): File!
  upsertNavigation(where: NavigationWhereUniqueInput!, create: NavigationCreateInput!, update: NavigationUpdateInput!): Navigation!
  upsertNavigationNode(where: NavigationNodeWhereUniqueInput!, create: NavigationNodeCreateInput!, update: NavigationNodeUpdateInput!): NavigationNode!
  upsertTag(where: TagWhereUniqueInput!, create: TagCreateInput!, update: TagUpdateInput!): Tag!
  upsertSubscriber(where: SubscriberWhereUniqueInput!, create: SubscriberCreateInput!, update: SubscriberUpdateInput!): Subscriber!
  upsertInquiry(where: InquiryWhereUniqueInput!, create: InquiryCreateInput!, update: InquiryUpdateInput!): Inquiry!
  upsertDatasource(where: DatasourceWhereUniqueInput!, create: DatasourceCreateInput!, update: DatasourceUpdateInput!): Datasource!
  upsertDatasourceItem(where: DatasourceItemWhereUniqueInput!, create: DatasourceItemCreateInput!, update: DatasourceItemUpdateInput!): DatasourceItem!
  upsertPage(where: PageWhereUniqueInput!, create: PageCreateInput!, update: PageUpdateInput!): Page!
  upsertPageType(where: PageTypeWhereUniqueInput!, create: PageTypeCreateInput!, update: PageTypeUpdateInput!): PageType!
  upsertWebsite(where: WebsiteWhereUniqueInput!, create: WebsiteCreateInput!, update: WebsiteUpdateInput!): Website!
  upsertLanguage(where: LanguageWhereUniqueInput!, create: LanguageCreateInput!, update: LanguageUpdateInput!): Language!
  updateManyProjects(data: ProjectUpdateInput!, where: ProjectWhereInput): BatchPayload!
  updateManyPageTranslations(data: PageTranslationUpdateInput!, where: PageTranslationWhereInput): BatchPayload!
  updateManyPagePlugins(data: PagePluginUpdateInput!, where: PagePluginWhereInput): BatchPayload!
  updateManyPageTasks(data: PageTaskUpdateInput!, where: PageTaskWhereInput): BatchPayload!
  updateManyPageChats(data: PageChatUpdateInput!, where: PageChatWhereInput): BatchPayload!
  updateManyFiles(data: FileUpdateInput!, where: FileWhereInput): BatchPayload!
  updateManyNavigations(data: NavigationUpdateInput!, where: NavigationWhereInput): BatchPayload!
  updateManyNavigationNodes(data: NavigationNodeUpdateInput!, where: NavigationNodeWhereInput): BatchPayload!
  updateManyTags(data: TagUpdateInput!, where: TagWhereInput): BatchPayload!
  updateManySubscribers(data: SubscriberUpdateInput!, where: SubscriberWhereInput): BatchPayload!
  updateManyInquiries(data: InquiryUpdateInput!, where: InquiryWhereInput): BatchPayload!
  updateManyDatasources(data: DatasourceUpdateInput!, where: DatasourceWhereInput): BatchPayload!
  updateManyDatasourceItems(data: DatasourceItemUpdateInput!, where: DatasourceItemWhereInput): BatchPayload!
  updateManyPages(data: PageUpdateInput!, where: PageWhereInput): BatchPayload!
  updateManyPageTypes(data: PageTypeUpdateInput!, where: PageTypeWhereInput): BatchPayload!
  updateManyWebsites(data: WebsiteUpdateInput!, where: WebsiteWhereInput): BatchPayload!
  updateManyLanguages(data: LanguageUpdateInput!, where: LanguageWhereInput): BatchPayload!
  deleteManyProjects(where: ProjectWhereInput): BatchPayload!
  deleteManyPageTranslations(where: PageTranslationWhereInput): BatchPayload!
  deleteManyPagePlugins(where: PagePluginWhereInput): BatchPayload!
  deleteManyPageTasks(where: PageTaskWhereInput): BatchPayload!
  deleteManyPageChats(where: PageChatWhereInput): BatchPayload!
  deleteManyFiles(where: FileWhereInput): BatchPayload!
  deleteManyNavigations(where: NavigationWhereInput): BatchPayload!
  deleteManyNavigationNodes(where: NavigationNodeWhereInput): BatchPayload!
  deleteManyTags(where: TagWhereInput): BatchPayload!
  deleteManySubscribers(where: SubscriberWhereInput): BatchPayload!
  deleteManyInquiries(where: InquiryWhereInput): BatchPayload!
  deleteManyDatasources(where: DatasourceWhereInput): BatchPayload!
  deleteManyDatasourceItems(where: DatasourceItemWhereInput): BatchPayload!
  deleteManyPages(where: PageWhereInput): BatchPayload!
  deleteManyPageTypes(where: PageTypeWhereInput): BatchPayload!
  deleteManyWebsites(where: WebsiteWhereInput): BatchPayload!
  deleteManyLanguages(where: LanguageWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type Navigation implements Node {
  id: ID!
  name: String!
  website(where: WebsiteWhereInput): Website!
  nodes(where: NavigationNodeWhereInput, orderBy: NavigationNodeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [NavigationNode!]
}

"""A connection to a list of items."""
type NavigationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [NavigationEdge]!
  aggregate: AggregateNavigation!
}

input NavigationCreateInput {
  name: String!
  website: WebsiteCreateOneInput!
  nodes: NavigationNodeCreateManyWithoutNavigationInput
}

input NavigationCreateOneWithoutNodesInput {
  create: NavigationCreateWithoutNodesInput
  connect: NavigationWhereUniqueInput
}

input NavigationCreateWithoutNodesInput {
  name: String!
  website: WebsiteCreateOneInput!
}

"""An edge in a connection."""
type NavigationEdge {
  """The item at the end of the edge."""
  node: Navigation!

  """A cursor for use in pagination."""
  cursor: String!
}

type NavigationNode implements Node {
  id: ID!
  navigation(where: NavigationWhereInput): Navigation!
  page: ID
  title: String
  link: String
  order: Int
  parent: ID
}

"""A connection to a list of items."""
type NavigationNodeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [NavigationNodeEdge]!
  aggregate: AggregateNavigationNode!
}

input NavigationNodeCreateInput {
  page: ID
  title: String
  link: String
  order: Int
  parent: ID
  navigation: NavigationCreateOneWithoutNodesInput!
}

input NavigationNodeCreateManyWithoutNavigationInput {
  create: [NavigationNodeCreateWithoutNavigationInput!]
  connect: [NavigationNodeWhereUniqueInput!]
}

input NavigationNodeCreateWithoutNavigationInput {
  page: ID
  title: String
  link: String
  order: Int
  parent: ID
}

"""An edge in a connection."""
type NavigationNodeEdge {
  """The item at the end of the edge."""
  node: NavigationNode!

  """A cursor for use in pagination."""
  cursor: String!
}

enum NavigationNodeOrderByInput {
  id_ASC
  id_DESC
  page_ASC
  page_DESC
  title_ASC
  title_DESC
  link_ASC
  link_DESC
  order_ASC
  order_DESC
  parent_ASC
  parent_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type NavigationNodePreviousValues {
  id: ID!
  page: ID
  title: String
  link: String
  order: Int
  parent: ID
}

type NavigationNodeSubscriptionPayload {
  mutation: MutationType!
  node: NavigationNode
  updatedFields: [String!]
  previousValues: NavigationNodePreviousValues
}

input NavigationNodeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [NavigationNodeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [NavigationNodeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NavigationNodeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: NavigationNodeWhereInput
}

input NavigationNodeUpdateInput {
  page: ID
  title: String
  link: String
  order: Int
  parent: ID
  navigation: NavigationUpdateOneWithoutNodesInput
}

input NavigationNodeUpdateManyWithoutNavigationInput {
  create: [NavigationNodeCreateWithoutNavigationInput!]
  connect: [NavigationNodeWhereUniqueInput!]
  disconnect: [NavigationNodeWhereUniqueInput!]
  delete: [NavigationNodeWhereUniqueInput!]
  update: [NavigationNodeUpdateWithWhereUniqueWithoutNavigationInput!]
  upsert: [NavigationNodeUpsertWithWhereUniqueWithoutNavigationInput!]
}

input NavigationNodeUpdateWithoutNavigationDataInput {
  page: ID
  title: String
  link: String
  order: Int
  parent: ID
}

input NavigationNodeUpdateWithWhereUniqueWithoutNavigationInput {
  where: NavigationNodeWhereUniqueInput!
  data: NavigationNodeUpdateWithoutNavigationDataInput!
}

input NavigationNodeUpsertWithWhereUniqueWithoutNavigationInput {
  where: NavigationNodeWhereUniqueInput!
  update: NavigationNodeUpdateWithoutNavigationDataInput!
  create: NavigationNodeCreateWithoutNavigationInput!
}

input NavigationNodeWhereInput {
  """Logical AND on all given filters."""
  AND: [NavigationNodeWhereInput!]

  """Logical OR on all given filters."""
  OR: [NavigationNodeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NavigationNodeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  page: ID

  """All values that are not equal to given value."""
  page_not: ID

  """All values that are contained in given list."""
  page_in: [ID!]

  """All values that are not contained in given list."""
  page_not_in: [ID!]

  """All values less than the given value."""
  page_lt: ID

  """All values less than or equal the given value."""
  page_lte: ID

  """All values greater than the given value."""
  page_gt: ID

  """All values greater than or equal the given value."""
  page_gte: ID

  """All values containing the given string."""
  page_contains: ID

  """All values not containing the given string."""
  page_not_contains: ID

  """All values starting with the given string."""
  page_starts_with: ID

  """All values not starting with the given string."""
  page_not_starts_with: ID

  """All values ending with the given string."""
  page_ends_with: ID

  """All values not ending with the given string."""
  page_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  link: String

  """All values that are not equal to given value."""
  link_not: String

  """All values that are contained in given list."""
  link_in: [String!]

  """All values that are not contained in given list."""
  link_not_in: [String!]

  """All values less than the given value."""
  link_lt: String

  """All values less than or equal the given value."""
  link_lte: String

  """All values greater than the given value."""
  link_gt: String

  """All values greater than or equal the given value."""
  link_gte: String

  """All values containing the given string."""
  link_contains: String

  """All values not containing the given string."""
  link_not_contains: String

  """All values starting with the given string."""
  link_starts_with: String

  """All values not starting with the given string."""
  link_not_starts_with: String

  """All values ending with the given string."""
  link_ends_with: String

  """All values not ending with the given string."""
  link_not_ends_with: String
  order: Int

  """All values that are not equal to given value."""
  order_not: Int

  """All values that are contained in given list."""
  order_in: [Int!]

  """All values that are not contained in given list."""
  order_not_in: [Int!]

  """All values less than the given value."""
  order_lt: Int

  """All values less than or equal the given value."""
  order_lte: Int

  """All values greater than the given value."""
  order_gt: Int

  """All values greater than or equal the given value."""
  order_gte: Int
  parent: ID

  """All values that are not equal to given value."""
  parent_not: ID

  """All values that are contained in given list."""
  parent_in: [ID!]

  """All values that are not contained in given list."""
  parent_not_in: [ID!]

  """All values less than the given value."""
  parent_lt: ID

  """All values less than or equal the given value."""
  parent_lte: ID

  """All values greater than the given value."""
  parent_gt: ID

  """All values greater than or equal the given value."""
  parent_gte: ID

  """All values containing the given string."""
  parent_contains: ID

  """All values not containing the given string."""
  parent_not_contains: ID

  """All values starting with the given string."""
  parent_starts_with: ID

  """All values not starting with the given string."""
  parent_not_starts_with: ID

  """All values ending with the given string."""
  parent_ends_with: ID

  """All values not ending with the given string."""
  parent_not_ends_with: ID
  navigation: NavigationWhereInput
}

input NavigationNodeWhereUniqueInput {
  id: ID
}

enum NavigationOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type NavigationPreviousValues {
  id: ID!
  name: String!
}

type NavigationSubscriptionPayload {
  mutation: MutationType!
  node: Navigation
  updatedFields: [String!]
  previousValues: NavigationPreviousValues
}

input NavigationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [NavigationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [NavigationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NavigationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: NavigationWhereInput
}

input NavigationUpdateInput {
  name: String
  website: WebsiteUpdateOneInput
  nodes: NavigationNodeUpdateManyWithoutNavigationInput
}

input NavigationUpdateOneWithoutNodesInput {
  create: NavigationCreateWithoutNodesInput
  connect: NavigationWhereUniqueInput
  delete: Boolean
  update: NavigationUpdateWithoutNodesDataInput
  upsert: NavigationUpsertWithoutNodesInput
}

input NavigationUpdateWithoutNodesDataInput {
  name: String
  website: WebsiteUpdateOneInput
}

input NavigationUpsertWithoutNodesInput {
  update: NavigationUpdateWithoutNodesDataInput!
  create: NavigationCreateWithoutNodesInput!
}

input NavigationWhereInput {
  """Logical AND on all given filters."""
  AND: [NavigationWhereInput!]

  """Logical OR on all given filters."""
  OR: [NavigationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NavigationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  website: WebsiteWhereInput
  nodes_every: NavigationNodeWhereInput
  nodes_some: NavigationNodeWhereInput
  nodes_none: NavigationNodeWhereInput
}

input NavigationWhereUniqueInput {
  id: ID
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Page implements Node {
  id: ID!
  parent(where: PageWhereInput): Page
  website(where: WebsiteWhereInput): Website!
  type(where: PageTypeWhereInput): PageType!
  translations(where: PageTranslationWhereInput, orderBy: PageTranslationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PageTranslation!]
  chats(where: PageChatWhereInput, orderBy: PageChatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PageChat!]
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag!]
  plugin(where: PagePluginWhereInput): PagePlugin
  datasources(where: DatasourceWhereInput, orderBy: DatasourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Datasource!]
}

type PageChat implements Node {
  id: ID!
  page(where: PageWhereInput): Page!
  text: String!
  createdAt: DateTime!
  auth0id: ID
}

"""A connection to a list of items."""
type PageChatConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PageChatEdge]!
  aggregate: AggregatePageChat!
}

input PageChatCreateInput {
  text: String!
  auth0id: ID
  page: PageCreateOneWithoutChatsInput!
}

input PageChatCreateManyWithoutPageInput {
  create: [PageChatCreateWithoutPageInput!]
  connect: [PageChatWhereUniqueInput!]
}

input PageChatCreateWithoutPageInput {
  text: String!
  auth0id: ID
}

"""An edge in a connection."""
type PageChatEdge {
  """The item at the end of the edge."""
  node: PageChat!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PageChatOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  createdAt_ASC
  createdAt_DESC
  auth0id_ASC
  auth0id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PageChatPreviousValues {
  id: ID!
  text: String!
  createdAt: DateTime!
  auth0id: ID
}

type PageChatSubscriptionPayload {
  mutation: MutationType!
  node: PageChat
  updatedFields: [String!]
  previousValues: PageChatPreviousValues
}

input PageChatSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PageChatSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PageChatSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PageChatSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PageChatWhereInput
}

input PageChatUpdateInput {
  text: String
  auth0id: ID
  page: PageUpdateOneWithoutChatsInput
}

input PageChatUpdateManyWithoutPageInput {
  create: [PageChatCreateWithoutPageInput!]
  connect: [PageChatWhereUniqueInput!]
  disconnect: [PageChatWhereUniqueInput!]
  delete: [PageChatWhereUniqueInput!]
  update: [PageChatUpdateWithWhereUniqueWithoutPageInput!]
  upsert: [PageChatUpsertWithWhereUniqueWithoutPageInput!]
}

input PageChatUpdateWithoutPageDataInput {
  text: String
  auth0id: ID
}

input PageChatUpdateWithWhereUniqueWithoutPageInput {
  where: PageChatWhereUniqueInput!
  data: PageChatUpdateWithoutPageDataInput!
}

input PageChatUpsertWithWhereUniqueWithoutPageInput {
  where: PageChatWhereUniqueInput!
  update: PageChatUpdateWithoutPageDataInput!
  create: PageChatCreateWithoutPageInput!
}

input PageChatWhereInput {
  """Logical AND on all given filters."""
  AND: [PageChatWhereInput!]

  """Logical OR on all given filters."""
  OR: [PageChatWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PageChatWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  auth0id: ID

  """All values that are not equal to given value."""
  auth0id_not: ID

  """All values that are contained in given list."""
  auth0id_in: [ID!]

  """All values that are not contained in given list."""
  auth0id_not_in: [ID!]

  """All values less than the given value."""
  auth0id_lt: ID

  """All values less than or equal the given value."""
  auth0id_lte: ID

  """All values greater than the given value."""
  auth0id_gt: ID

  """All values greater than or equal the given value."""
  auth0id_gte: ID

  """All values containing the given string."""
  auth0id_contains: ID

  """All values not containing the given string."""
  auth0id_not_contains: ID

  """All values starting with the given string."""
  auth0id_starts_with: ID

  """All values not starting with the given string."""
  auth0id_not_starts_with: ID

  """All values ending with the given string."""
  auth0id_ends_with: ID

  """All values not ending with the given string."""
  auth0id_not_ends_with: ID
  page: PageWhereInput
}

input PageChatWhereUniqueInput {
  id: ID
}

"""A connection to a list of items."""
type PageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PageEdge]!
  aggregate: AggregatePage!
}

input PageCreateInput {
  parent: PageCreateOneInput
  website: WebsiteCreateOneWithoutPagesInput!
  type: PageTypeCreateOneInput!
  translations: PageTranslationCreateManyWithoutPageInput
  chats: PageChatCreateManyWithoutPageInput
  tags: TagCreateManyWithoutPagesInput
  plugin: PagePluginCreateOneWithoutPageInput
  datasources: DatasourceCreateManyWithoutPageInput
}

input PageCreateManyWithoutDatasourcesInput {
  create: [PageCreateWithoutDatasourcesInput!]
  connect: [PageWhereUniqueInput!]
}

input PageCreateManyWithoutTagsInput {
  create: [PageCreateWithoutTagsInput!]
  connect: [PageWhereUniqueInput!]
}

input PageCreateManyWithoutWebsiteInput {
  create: [PageCreateWithoutWebsiteInput!]
  connect: [PageWhereUniqueInput!]
}

input PageCreateOneInput {
  create: PageCreateInput
  connect: PageWhereUniqueInput
}

input PageCreateOneWithoutChatsInput {
  create: PageCreateWithoutChatsInput
  connect: PageWhereUniqueInput
}

input PageCreateOneWithoutPluginInput {
  create: PageCreateWithoutPluginInput
  connect: PageWhereUniqueInput
}

input PageCreateOneWithoutTranslationsInput {
  create: PageCreateWithoutTranslationsInput
  connect: PageWhereUniqueInput
}

input PageCreateWithoutChatsInput {
  parent: PageCreateOneInput
  website: WebsiteCreateOneWithoutPagesInput!
  type: PageTypeCreateOneInput!
  translations: PageTranslationCreateManyWithoutPageInput
  tags: TagCreateManyWithoutPagesInput
  plugin: PagePluginCreateOneWithoutPageInput
  datasources: DatasourceCreateManyWithoutPageInput
}

input PageCreateWithoutDatasourcesInput {
  parent: PageCreateOneInput
  website: WebsiteCreateOneWithoutPagesInput!
  type: PageTypeCreateOneInput!
  translations: PageTranslationCreateManyWithoutPageInput
  chats: PageChatCreateManyWithoutPageInput
  tags: TagCreateManyWithoutPagesInput
  plugin: PagePluginCreateOneWithoutPageInput
}

input PageCreateWithoutPluginInput {
  parent: PageCreateOneInput
  website: WebsiteCreateOneWithoutPagesInput!
  type: PageTypeCreateOneInput!
  translations: PageTranslationCreateManyWithoutPageInput
  chats: PageChatCreateManyWithoutPageInput
  tags: TagCreateManyWithoutPagesInput
  datasources: DatasourceCreateManyWithoutPageInput
}

input PageCreateWithoutTagsInput {
  parent: PageCreateOneInput
  website: WebsiteCreateOneWithoutPagesInput!
  type: PageTypeCreateOneInput!
  translations: PageTranslationCreateManyWithoutPageInput
  chats: PageChatCreateManyWithoutPageInput
  plugin: PagePluginCreateOneWithoutPageInput
  datasources: DatasourceCreateManyWithoutPageInput
}

input PageCreateWithoutTranslationsInput {
  parent: PageCreateOneInput
  website: WebsiteCreateOneWithoutPagesInput!
  type: PageTypeCreateOneInput!
  chats: PageChatCreateManyWithoutPageInput
  tags: TagCreateManyWithoutPagesInput
  plugin: PagePluginCreateOneWithoutPageInput
  datasources: DatasourceCreateManyWithoutPageInput
}

input PageCreateWithoutWebsiteInput {
  parent: PageCreateOneInput
  type: PageTypeCreateOneInput!
  translations: PageTranslationCreateManyWithoutPageInput
  chats: PageChatCreateManyWithoutPageInput
  tags: TagCreateManyWithoutPagesInput
  plugin: PagePluginCreateOneWithoutPageInput
  datasources: DatasourceCreateManyWithoutPageInput
}

"""An edge in a connection."""
type PageEdge {
  """The item at the end of the edge."""
  node: Page!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum PageOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PagePlugin implements Node {
  id: ID!
  page(where: PageWhereInput): Page!
  language(where: LanguageWhereInput): Language!
  plugin: String!
  content: Json!
}

"""A connection to a list of items."""
type PagePluginConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PagePluginEdge]!
  aggregate: AggregatePagePlugin!
}

input PagePluginCreateInput {
  plugin: String!
  content: Json
  page: PageCreateOneWithoutPluginInput!
  language: LanguageCreateOneInput!
}

input PagePluginCreateOneWithoutPageInput {
  create: PagePluginCreateWithoutPageInput
  connect: PagePluginWhereUniqueInput
}

input PagePluginCreateWithoutPageInput {
  plugin: String!
  content: Json
  language: LanguageCreateOneInput!
}

"""An edge in a connection."""
type PagePluginEdge {
  """The item at the end of the edge."""
  node: PagePlugin!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PagePluginOrderByInput {
  id_ASC
  id_DESC
  plugin_ASC
  plugin_DESC
  content_ASC
  content_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PagePluginPreviousValues {
  id: ID!
  plugin: String!
  content: Json!
}

type PagePluginSubscriptionPayload {
  mutation: MutationType!
  node: PagePlugin
  updatedFields: [String!]
  previousValues: PagePluginPreviousValues
}

input PagePluginSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PagePluginSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PagePluginSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PagePluginSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PagePluginWhereInput
}

input PagePluginUpdateInput {
  plugin: String
  content: Json
  page: PageUpdateOneWithoutPluginInput
  language: LanguageUpdateOneInput
}

input PagePluginUpdateOneWithoutPageInput {
  create: PagePluginCreateWithoutPageInput
  connect: PagePluginWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PagePluginUpdateWithoutPageDataInput
  upsert: PagePluginUpsertWithoutPageInput
}

input PagePluginUpdateWithoutPageDataInput {
  plugin: String
  content: Json
  language: LanguageUpdateOneInput
}

input PagePluginUpsertWithoutPageInput {
  update: PagePluginUpdateWithoutPageDataInput!
  create: PagePluginCreateWithoutPageInput!
}

input PagePluginWhereInput {
  """Logical AND on all given filters."""
  AND: [PagePluginWhereInput!]

  """Logical OR on all given filters."""
  OR: [PagePluginWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PagePluginWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  plugin: String

  """All values that are not equal to given value."""
  plugin_not: String

  """All values that are contained in given list."""
  plugin_in: [String!]

  """All values that are not contained in given list."""
  plugin_not_in: [String!]

  """All values less than the given value."""
  plugin_lt: String

  """All values less than or equal the given value."""
  plugin_lte: String

  """All values greater than the given value."""
  plugin_gt: String

  """All values greater than or equal the given value."""
  plugin_gte: String

  """All values containing the given string."""
  plugin_contains: String

  """All values not containing the given string."""
  plugin_not_contains: String

  """All values starting with the given string."""
  plugin_starts_with: String

  """All values not starting with the given string."""
  plugin_not_starts_with: String

  """All values ending with the given string."""
  plugin_ends_with: String

  """All values not ending with the given string."""
  plugin_not_ends_with: String
  page: PageWhereInput
  language: LanguageWhereInput
}

input PagePluginWhereUniqueInput {
  id: ID
}

type PagePreviousValues {
  id: ID!
}

enum PageStatus {
  DRAFT
  PENDING
  PUBLISHED
}

type PageSubscriptionPayload {
  mutation: MutationType!
  node: Page
  updatedFields: [String!]
  previousValues: PagePreviousValues
}

input PageSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PageSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PageSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PageSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PageWhereInput
}

type PageTask implements Node {
  id: ID!
  pageTranslation(where: PageTranslationWhereInput): PageTranslation!
  done: Boolean!
  name: String!
  description: String!
  updatedAt: DateTime!
  auth0id: ID
}

"""A connection to a list of items."""
type PageTaskConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PageTaskEdge]!
  aggregate: AggregatePageTask!
}

input PageTaskCreateInput {
  done: Boolean
  name: String!
  description: String!
  auth0id: ID
  pageTranslation: PageTranslationCreateOneWithoutTasksInput!
}

input PageTaskCreateManyWithoutPageTranslationInput {
  create: [PageTaskCreateWithoutPageTranslationInput!]
  connect: [PageTaskWhereUniqueInput!]
}

input PageTaskCreateWithoutPageTranslationInput {
  done: Boolean
  name: String!
  description: String!
  auth0id: ID
}

"""An edge in a connection."""
type PageTaskEdge {
  """The item at the end of the edge."""
  node: PageTask!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PageTaskOrderByInput {
  id_ASC
  id_DESC
  done_ASC
  done_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  auth0id_ASC
  auth0id_DESC
  createdAt_ASC
  createdAt_DESC
}

type PageTaskPreviousValues {
  id: ID!
  done: Boolean!
  name: String!
  description: String!
  updatedAt: DateTime!
  auth0id: ID
}

type PageTaskSubscriptionPayload {
  mutation: MutationType!
  node: PageTask
  updatedFields: [String!]
  previousValues: PageTaskPreviousValues
}

input PageTaskSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PageTaskSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PageTaskSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PageTaskSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PageTaskWhereInput
}

input PageTaskUpdateInput {
  done: Boolean
  name: String
  description: String
  auth0id: ID
  pageTranslation: PageTranslationUpdateOneWithoutTasksInput
}

input PageTaskUpdateManyWithoutPageTranslationInput {
  create: [PageTaskCreateWithoutPageTranslationInput!]
  connect: [PageTaskWhereUniqueInput!]
  disconnect: [PageTaskWhereUniqueInput!]
  delete: [PageTaskWhereUniqueInput!]
  update: [PageTaskUpdateWithWhereUniqueWithoutPageTranslationInput!]
  upsert: [PageTaskUpsertWithWhereUniqueWithoutPageTranslationInput!]
}

input PageTaskUpdateWithoutPageTranslationDataInput {
  done: Boolean
  name: String
  description: String
  auth0id: ID
}

input PageTaskUpdateWithWhereUniqueWithoutPageTranslationInput {
  where: PageTaskWhereUniqueInput!
  data: PageTaskUpdateWithoutPageTranslationDataInput!
}

input PageTaskUpsertWithWhereUniqueWithoutPageTranslationInput {
  where: PageTaskWhereUniqueInput!
  update: PageTaskUpdateWithoutPageTranslationDataInput!
  create: PageTaskCreateWithoutPageTranslationInput!
}

input PageTaskWhereInput {
  """Logical AND on all given filters."""
  AND: [PageTaskWhereInput!]

  """Logical OR on all given filters."""
  OR: [PageTaskWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PageTaskWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  done: Boolean

  """All values that are not equal to given value."""
  done_not: Boolean
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  auth0id: ID

  """All values that are not equal to given value."""
  auth0id_not: ID

  """All values that are contained in given list."""
  auth0id_in: [ID!]

  """All values that are not contained in given list."""
  auth0id_not_in: [ID!]

  """All values less than the given value."""
  auth0id_lt: ID

  """All values less than or equal the given value."""
  auth0id_lte: ID

  """All values greater than the given value."""
  auth0id_gt: ID

  """All values greater than or equal the given value."""
  auth0id_gte: ID

  """All values containing the given string."""
  auth0id_contains: ID

  """All values not containing the given string."""
  auth0id_not_contains: ID

  """All values starting with the given string."""
  auth0id_starts_with: ID

  """All values not starting with the given string."""
  auth0id_not_starts_with: ID

  """All values ending with the given string."""
  auth0id_ends_with: ID

  """All values not ending with the given string."""
  auth0id_not_ends_with: ID
  pageTranslation: PageTranslationWhereInput
}

input PageTaskWhereUniqueInput {
  id: ID
}

type PageTranslation implements Node {
  id: ID!
  page(where: PageWhereInput): Page!
  language(where: LanguageWhereInput): Language!
  url: String!
  content: Json!
  name: String!
  status: PageStatus!
  description: String
  publishedFrom: DateTime
  publishedTo: DateTime
  tasks(where: PageTaskWhereInput, orderBy: PageTaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PageTask!]
  createdAt: DateTime!
}

"""A connection to a list of items."""
type PageTranslationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PageTranslationEdge]!
  aggregate: AggregatePageTranslation!
}

input PageTranslationCreateInput {
  url: String!
  content: Json
  name: String
  status: PageStatus
  description: String
  publishedFrom: DateTime
  publishedTo: DateTime
  page: PageCreateOneWithoutTranslationsInput!
  language: LanguageCreateOneInput!
  tasks: PageTaskCreateManyWithoutPageTranslationInput
}

input PageTranslationCreateManyWithoutPageInput {
  create: [PageTranslationCreateWithoutPageInput!]
  connect: [PageTranslationWhereUniqueInput!]
}

input PageTranslationCreateOneWithoutTasksInput {
  create: PageTranslationCreateWithoutTasksInput
  connect: PageTranslationWhereUniqueInput
}

input PageTranslationCreateWithoutPageInput {
  url: String!
  content: Json
  name: String
  status: PageStatus
  description: String
  publishedFrom: DateTime
  publishedTo: DateTime
  language: LanguageCreateOneInput!
  tasks: PageTaskCreateManyWithoutPageTranslationInput
}

input PageTranslationCreateWithoutTasksInput {
  url: String!
  content: Json
  name: String
  status: PageStatus
  description: String
  publishedFrom: DateTime
  publishedTo: DateTime
  page: PageCreateOneWithoutTranslationsInput!
  language: LanguageCreateOneInput!
}

"""An edge in a connection."""
type PageTranslationEdge {
  """The item at the end of the edge."""
  node: PageTranslation!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PageTranslationOrderByInput {
  id_ASC
  id_DESC
  url_ASC
  url_DESC
  content_ASC
  content_DESC
  name_ASC
  name_DESC
  status_ASC
  status_DESC
  description_ASC
  description_DESC
  publishedFrom_ASC
  publishedFrom_DESC
  publishedTo_ASC
  publishedTo_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PageTranslationPreviousValues {
  id: ID!
  url: String!
  content: Json!
  name: String!
  status: PageStatus!
  description: String
  publishedFrom: DateTime
  publishedTo: DateTime
  createdAt: DateTime!
}

type PageTranslationSubscriptionPayload {
  mutation: MutationType!
  node: PageTranslation
  updatedFields: [String!]
  previousValues: PageTranslationPreviousValues
}

input PageTranslationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PageTranslationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PageTranslationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PageTranslationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PageTranslationWhereInput
}

input PageTranslationUpdateInput {
  url: String
  content: Json
  name: String
  status: PageStatus
  description: String
  publishedFrom: DateTime
  publishedTo: DateTime
  page: PageUpdateOneWithoutTranslationsInput
  language: LanguageUpdateOneInput
  tasks: PageTaskUpdateManyWithoutPageTranslationInput
}

input PageTranslationUpdateManyWithoutPageInput {
  create: [PageTranslationCreateWithoutPageInput!]
  connect: [PageTranslationWhereUniqueInput!]
  disconnect: [PageTranslationWhereUniqueInput!]
  delete: [PageTranslationWhereUniqueInput!]
  update: [PageTranslationUpdateWithWhereUniqueWithoutPageInput!]
  upsert: [PageTranslationUpsertWithWhereUniqueWithoutPageInput!]
}

input PageTranslationUpdateOneWithoutTasksInput {
  create: PageTranslationCreateWithoutTasksInput
  connect: PageTranslationWhereUniqueInput
  delete: Boolean
  update: PageTranslationUpdateWithoutTasksDataInput
  upsert: PageTranslationUpsertWithoutTasksInput
}

input PageTranslationUpdateWithoutPageDataInput {
  url: String
  content: Json
  name: String
  status: PageStatus
  description: String
  publishedFrom: DateTime
  publishedTo: DateTime
  language: LanguageUpdateOneInput
  tasks: PageTaskUpdateManyWithoutPageTranslationInput
}

input PageTranslationUpdateWithoutTasksDataInput {
  url: String
  content: Json
  name: String
  status: PageStatus
  description: String
  publishedFrom: DateTime
  publishedTo: DateTime
  page: PageUpdateOneWithoutTranslationsInput
  language: LanguageUpdateOneInput
}

input PageTranslationUpdateWithWhereUniqueWithoutPageInput {
  where: PageTranslationWhereUniqueInput!
  data: PageTranslationUpdateWithoutPageDataInput!
}

input PageTranslationUpsertWithoutTasksInput {
  update: PageTranslationUpdateWithoutTasksDataInput!
  create: PageTranslationCreateWithoutTasksInput!
}

input PageTranslationUpsertWithWhereUniqueWithoutPageInput {
  where: PageTranslationWhereUniqueInput!
  update: PageTranslationUpdateWithoutPageDataInput!
  create: PageTranslationCreateWithoutPageInput!
}

input PageTranslationWhereInput {
  """Logical AND on all given filters."""
  AND: [PageTranslationWhereInput!]

  """Logical OR on all given filters."""
  OR: [PageTranslationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PageTranslationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  status: PageStatus

  """All values that are not equal to given value."""
  status_not: PageStatus

  """All values that are contained in given list."""
  status_in: [PageStatus!]

  """All values that are not contained in given list."""
  status_not_in: [PageStatus!]
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  publishedFrom: DateTime

  """All values that are not equal to given value."""
  publishedFrom_not: DateTime

  """All values that are contained in given list."""
  publishedFrom_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedFrom_not_in: [DateTime!]

  """All values less than the given value."""
  publishedFrom_lt: DateTime

  """All values less than or equal the given value."""
  publishedFrom_lte: DateTime

  """All values greater than the given value."""
  publishedFrom_gt: DateTime

  """All values greater than or equal the given value."""
  publishedFrom_gte: DateTime
  publishedTo: DateTime

  """All values that are not equal to given value."""
  publishedTo_not: DateTime

  """All values that are contained in given list."""
  publishedTo_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedTo_not_in: [DateTime!]

  """All values less than the given value."""
  publishedTo_lt: DateTime

  """All values less than or equal the given value."""
  publishedTo_lte: DateTime

  """All values greater than the given value."""
  publishedTo_gt: DateTime

  """All values greater than or equal the given value."""
  publishedTo_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  page: PageWhereInput
  language: LanguageWhereInput
  tasks_every: PageTaskWhereInput
  tasks_some: PageTaskWhereInput
  tasks_none: PageTaskWhereInput
}

input PageTranslationWhereUniqueInput {
  id: ID
}

type PageType implements Node {
  id: ID!
  name: String!
  content: Json!
  website(where: WebsiteWhereInput): Website!
  plugins: [String!]!
}

"""A connection to a list of items."""
type PageTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PageTypeEdge]!
  aggregate: AggregatePageType!
}

input PageTypeCreateInput {
  name: String!
  content: Json
  plugins: PageTypeCreatepluginsInput
  website: WebsiteCreateOneWithoutPageTypesInput!
}

input PageTypeCreateManyWithoutWebsiteInput {
  create: [PageTypeCreateWithoutWebsiteInput!]
  connect: [PageTypeWhereUniqueInput!]
}

input PageTypeCreateOneInput {
  create: PageTypeCreateInput
  connect: PageTypeWhereUniqueInput
}

input PageTypeCreatepluginsInput {
  set: [String!]
}

input PageTypeCreateWithoutWebsiteInput {
  name: String!
  content: Json
  plugins: PageTypeCreatepluginsInput
}

"""An edge in a connection."""
type PageTypeEdge {
  """The item at the end of the edge."""
  node: PageType!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PageTypeOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  content_ASC
  content_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PageTypePreviousValues {
  id: ID!
  name: String!
  content: Json!
  plugins: [String!]!
}

type PageTypeSubscriptionPayload {
  mutation: MutationType!
  node: PageType
  updatedFields: [String!]
  previousValues: PageTypePreviousValues
}

input PageTypeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PageTypeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PageTypeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PageTypeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PageTypeWhereInput
}

input PageTypeUpdateDataInput {
  name: String
  content: Json
  plugins: PageTypeUpdatepluginsInput
  website: WebsiteUpdateOneWithoutPageTypesInput
}

input PageTypeUpdateInput {
  name: String
  content: Json
  plugins: PageTypeUpdatepluginsInput
  website: WebsiteUpdateOneWithoutPageTypesInput
}

input PageTypeUpdateManyWithoutWebsiteInput {
  create: [PageTypeCreateWithoutWebsiteInput!]
  connect: [PageTypeWhereUniqueInput!]
  disconnect: [PageTypeWhereUniqueInput!]
  delete: [PageTypeWhereUniqueInput!]
  update: [PageTypeUpdateWithWhereUniqueWithoutWebsiteInput!]
  upsert: [PageTypeUpsertWithWhereUniqueWithoutWebsiteInput!]
}

input PageTypeUpdateOneInput {
  create: PageTypeCreateInput
  connect: PageTypeWhereUniqueInput
  delete: Boolean
  update: PageTypeUpdateDataInput
  upsert: PageTypeUpsertNestedInput
}

input PageTypeUpdatepluginsInput {
  set: [String!]
}

input PageTypeUpdateWithoutWebsiteDataInput {
  name: String
  content: Json
  plugins: PageTypeUpdatepluginsInput
}

input PageTypeUpdateWithWhereUniqueWithoutWebsiteInput {
  where: PageTypeWhereUniqueInput!
  data: PageTypeUpdateWithoutWebsiteDataInput!
}

input PageTypeUpsertNestedInput {
  update: PageTypeUpdateDataInput!
  create: PageTypeCreateInput!
}

input PageTypeUpsertWithWhereUniqueWithoutWebsiteInput {
  where: PageTypeWhereUniqueInput!
  update: PageTypeUpdateWithoutWebsiteDataInput!
  create: PageTypeCreateWithoutWebsiteInput!
}

input PageTypeWhereInput {
  """Logical AND on all given filters."""
  AND: [PageTypeWhereInput!]

  """Logical OR on all given filters."""
  OR: [PageTypeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PageTypeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  website: WebsiteWhereInput
}

input PageTypeWhereUniqueInput {
  id: ID
}

input PageUpdateDataInput {
  parent: PageUpdateOneInput
  website: WebsiteUpdateOneWithoutPagesInput
  type: PageTypeUpdateOneInput
  translations: PageTranslationUpdateManyWithoutPageInput
  chats: PageChatUpdateManyWithoutPageInput
  tags: TagUpdateManyWithoutPagesInput
  plugin: PagePluginUpdateOneWithoutPageInput
  datasources: DatasourceUpdateManyWithoutPageInput
}

input PageUpdateInput {
  parent: PageUpdateOneInput
  website: WebsiteUpdateOneWithoutPagesInput
  type: PageTypeUpdateOneInput
  translations: PageTranslationUpdateManyWithoutPageInput
  chats: PageChatUpdateManyWithoutPageInput
  tags: TagUpdateManyWithoutPagesInput
  plugin: PagePluginUpdateOneWithoutPageInput
  datasources: DatasourceUpdateManyWithoutPageInput
}

input PageUpdateManyWithoutDatasourcesInput {
  create: [PageCreateWithoutDatasourcesInput!]
  connect: [PageWhereUniqueInput!]
  disconnect: [PageWhereUniqueInput!]
  delete: [PageWhereUniqueInput!]
  update: [PageUpdateWithWhereUniqueWithoutDatasourcesInput!]
  upsert: [PageUpsertWithWhereUniqueWithoutDatasourcesInput!]
}

input PageUpdateManyWithoutTagsInput {
  create: [PageCreateWithoutTagsInput!]
  connect: [PageWhereUniqueInput!]
  disconnect: [PageWhereUniqueInput!]
  delete: [PageWhereUniqueInput!]
  update: [PageUpdateWithWhereUniqueWithoutTagsInput!]
  upsert: [PageUpsertWithWhereUniqueWithoutTagsInput!]
}

input PageUpdateManyWithoutWebsiteInput {
  create: [PageCreateWithoutWebsiteInput!]
  connect: [PageWhereUniqueInput!]
  disconnect: [PageWhereUniqueInput!]
  delete: [PageWhereUniqueInput!]
  update: [PageUpdateWithWhereUniqueWithoutWebsiteInput!]
  upsert: [PageUpsertWithWhereUniqueWithoutWebsiteInput!]
}

input PageUpdateOneInput {
  create: PageCreateInput
  connect: PageWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PageUpdateDataInput
  upsert: PageUpsertNestedInput
}

input PageUpdateOneWithoutChatsInput {
  create: PageCreateWithoutChatsInput
  connect: PageWhereUniqueInput
  delete: Boolean
  update: PageUpdateWithoutChatsDataInput
  upsert: PageUpsertWithoutChatsInput
}

input PageUpdateOneWithoutPluginInput {
  create: PageCreateWithoutPluginInput
  connect: PageWhereUniqueInput
  delete: Boolean
  update: PageUpdateWithoutPluginDataInput
  upsert: PageUpsertWithoutPluginInput
}

input PageUpdateOneWithoutTranslationsInput {
  create: PageCreateWithoutTranslationsInput
  connect: PageWhereUniqueInput
  delete: Boolean
  update: PageUpdateWithoutTranslationsDataInput
  upsert: PageUpsertWithoutTranslationsInput
}

input PageUpdateWithoutChatsDataInput {
  parent: PageUpdateOneInput
  website: WebsiteUpdateOneWithoutPagesInput
  type: PageTypeUpdateOneInput
  translations: PageTranslationUpdateManyWithoutPageInput
  tags: TagUpdateManyWithoutPagesInput
  plugin: PagePluginUpdateOneWithoutPageInput
  datasources: DatasourceUpdateManyWithoutPageInput
}

input PageUpdateWithoutDatasourcesDataInput {
  parent: PageUpdateOneInput
  website: WebsiteUpdateOneWithoutPagesInput
  type: PageTypeUpdateOneInput
  translations: PageTranslationUpdateManyWithoutPageInput
  chats: PageChatUpdateManyWithoutPageInput
  tags: TagUpdateManyWithoutPagesInput
  plugin: PagePluginUpdateOneWithoutPageInput
}

input PageUpdateWithoutPluginDataInput {
  parent: PageUpdateOneInput
  website: WebsiteUpdateOneWithoutPagesInput
  type: PageTypeUpdateOneInput
  translations: PageTranslationUpdateManyWithoutPageInput
  chats: PageChatUpdateManyWithoutPageInput
  tags: TagUpdateManyWithoutPagesInput
  datasources: DatasourceUpdateManyWithoutPageInput
}

input PageUpdateWithoutTagsDataInput {
  parent: PageUpdateOneInput
  website: WebsiteUpdateOneWithoutPagesInput
  type: PageTypeUpdateOneInput
  translations: PageTranslationUpdateManyWithoutPageInput
  chats: PageChatUpdateManyWithoutPageInput
  plugin: PagePluginUpdateOneWithoutPageInput
  datasources: DatasourceUpdateManyWithoutPageInput
}

input PageUpdateWithoutTranslationsDataInput {
  parent: PageUpdateOneInput
  website: WebsiteUpdateOneWithoutPagesInput
  type: PageTypeUpdateOneInput
  chats: PageChatUpdateManyWithoutPageInput
  tags: TagUpdateManyWithoutPagesInput
  plugin: PagePluginUpdateOneWithoutPageInput
  datasources: DatasourceUpdateManyWithoutPageInput
}

input PageUpdateWithoutWebsiteDataInput {
  parent: PageUpdateOneInput
  type: PageTypeUpdateOneInput
  translations: PageTranslationUpdateManyWithoutPageInput
  chats: PageChatUpdateManyWithoutPageInput
  tags: TagUpdateManyWithoutPagesInput
  plugin: PagePluginUpdateOneWithoutPageInput
  datasources: DatasourceUpdateManyWithoutPageInput
}

input PageUpdateWithWhereUniqueWithoutDatasourcesInput {
  where: PageWhereUniqueInput!
  data: PageUpdateWithoutDatasourcesDataInput!
}

input PageUpdateWithWhereUniqueWithoutTagsInput {
  where: PageWhereUniqueInput!
  data: PageUpdateWithoutTagsDataInput!
}

input PageUpdateWithWhereUniqueWithoutWebsiteInput {
  where: PageWhereUniqueInput!
  data: PageUpdateWithoutWebsiteDataInput!
}

input PageUpsertNestedInput {
  update: PageUpdateDataInput!
  create: PageCreateInput!
}

input PageUpsertWithoutChatsInput {
  update: PageUpdateWithoutChatsDataInput!
  create: PageCreateWithoutChatsInput!
}

input PageUpsertWithoutPluginInput {
  update: PageUpdateWithoutPluginDataInput!
  create: PageCreateWithoutPluginInput!
}

input PageUpsertWithoutTranslationsInput {
  update: PageUpdateWithoutTranslationsDataInput!
  create: PageCreateWithoutTranslationsInput!
}

input PageUpsertWithWhereUniqueWithoutDatasourcesInput {
  where: PageWhereUniqueInput!
  update: PageUpdateWithoutDatasourcesDataInput!
  create: PageCreateWithoutDatasourcesInput!
}

input PageUpsertWithWhereUniqueWithoutTagsInput {
  where: PageWhereUniqueInput!
  update: PageUpdateWithoutTagsDataInput!
  create: PageCreateWithoutTagsInput!
}

input PageUpsertWithWhereUniqueWithoutWebsiteInput {
  where: PageWhereUniqueInput!
  update: PageUpdateWithoutWebsiteDataInput!
  create: PageCreateWithoutWebsiteInput!
}

input PageWhereInput {
  """Logical AND on all given filters."""
  AND: [PageWhereInput!]

  """Logical OR on all given filters."""
  OR: [PageWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PageWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  parent: PageWhereInput
  website: WebsiteWhereInput
  type: PageTypeWhereInput
  translations_every: PageTranslationWhereInput
  translations_some: PageTranslationWhereInput
  translations_none: PageTranslationWhereInput
  chats_every: PageChatWhereInput
  chats_some: PageChatWhereInput
  chats_none: PageChatWhereInput
  tags_every: TagWhereInput
  tags_some: TagWhereInput
  tags_none: TagWhereInput
  plugin: PagePluginWhereInput
  datasources_every: DatasourceWhereInput
  datasources_some: DatasourceWhereInput
  datasources_none: DatasourceWhereInput
}

input PageWhereUniqueInput {
  id: ID
}

type Project implements Node {
  id: ID!
  name: String!
  defaultName: String!
  languages(where: LanguageWhereInput, orderBy: LanguageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Language!]
  defaultLanguage(where: LanguageWhereInput): Language!
  settings: Json!
  websites(where: WebsiteWhereInput, orderBy: WebsiteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Website!]
}

"""A connection to a list of items."""
type ProjectConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProjectEdge]!
  aggregate: AggregateProject!
}

input ProjectCreateInput {
  name: String!
  defaultName: String!
  settings: Json
  languages: LanguageCreateManyInput
  defaultLanguage: LanguageCreateOneInput!
  websites: WebsiteCreateManyWithoutProjectInput
}

input ProjectCreateOneWithoutWebsitesInput {
  create: ProjectCreateWithoutWebsitesInput
  connect: ProjectWhereUniqueInput
}

input ProjectCreateWithoutWebsitesInput {
  name: String!
  defaultName: String!
  settings: Json
  languages: LanguageCreateManyInput
  defaultLanguage: LanguageCreateOneInput!
}

"""An edge in a connection."""
type ProjectEdge {
  """The item at the end of the edge."""
  node: Project!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProjectOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  defaultName_ASC
  defaultName_DESC
  settings_ASC
  settings_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ProjectPreviousValues {
  id: ID!
  name: String!
  defaultName: String!
  settings: Json!
}

type ProjectSubscriptionPayload {
  mutation: MutationType!
  node: Project
  updatedFields: [String!]
  previousValues: ProjectPreviousValues
}

input ProjectSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProjectSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProjectSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProjectSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProjectWhereInput
}

input ProjectUpdateInput {
  name: String
  defaultName: String
  settings: Json
  languages: LanguageUpdateManyInput
  defaultLanguage: LanguageUpdateOneInput
  websites: WebsiteUpdateManyWithoutProjectInput
}

input ProjectUpdateOneWithoutWebsitesInput {
  create: ProjectCreateWithoutWebsitesInput
  connect: ProjectWhereUniqueInput
  delete: Boolean
  update: ProjectUpdateWithoutWebsitesDataInput
  upsert: ProjectUpsertWithoutWebsitesInput
}

input ProjectUpdateWithoutWebsitesDataInput {
  name: String
  defaultName: String
  settings: Json
  languages: LanguageUpdateManyInput
  defaultLanguage: LanguageUpdateOneInput
}

input ProjectUpsertWithoutWebsitesInput {
  update: ProjectUpdateWithoutWebsitesDataInput!
  create: ProjectCreateWithoutWebsitesInput!
}

input ProjectWhereInput {
  """Logical AND on all given filters."""
  AND: [ProjectWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProjectWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProjectWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  defaultName: String

  """All values that are not equal to given value."""
  defaultName_not: String

  """All values that are contained in given list."""
  defaultName_in: [String!]

  """All values that are not contained in given list."""
  defaultName_not_in: [String!]

  """All values less than the given value."""
  defaultName_lt: String

  """All values less than or equal the given value."""
  defaultName_lte: String

  """All values greater than the given value."""
  defaultName_gt: String

  """All values greater than or equal the given value."""
  defaultName_gte: String

  """All values containing the given string."""
  defaultName_contains: String

  """All values not containing the given string."""
  defaultName_not_contains: String

  """All values starting with the given string."""
  defaultName_starts_with: String

  """All values not starting with the given string."""
  defaultName_not_starts_with: String

  """All values ending with the given string."""
  defaultName_ends_with: String

  """All values not ending with the given string."""
  defaultName_not_ends_with: String
  languages_every: LanguageWhereInput
  languages_some: LanguageWhereInput
  languages_none: LanguageWhereInput
  defaultLanguage: LanguageWhereInput
  websites_every: WebsiteWhereInput
  websites_some: WebsiteWhereInput
  websites_none: WebsiteWhereInput
}

input ProjectWhereUniqueInput {
  id: ID
}

type Query {
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project]!
  pageTranslations(where: PageTranslationWhereInput, orderBy: PageTranslationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PageTranslation]!
  pagePlugins(where: PagePluginWhereInput, orderBy: PagePluginOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PagePlugin]!
  pageTasks(where: PageTaskWhereInput, orderBy: PageTaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PageTask]!
  pageChats(where: PageChatWhereInput, orderBy: PageChatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PageChat]!
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File]!
  navigations(where: NavigationWhereInput, orderBy: NavigationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Navigation]!
  navigationNodes(where: NavigationNodeWhereInput, orderBy: NavigationNodeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [NavigationNode]!
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag]!
  subscribers(where: SubscriberWhereInput, orderBy: SubscriberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Subscriber]!
  inquiries(where: InquiryWhereInput, orderBy: InquiryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Inquiry]!
  datasources(where: DatasourceWhereInput, orderBy: DatasourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Datasource]!
  datasourceItems(where: DatasourceItemWhereInput, orderBy: DatasourceItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DatasourceItem]!
  pages(where: PageWhereInput, orderBy: PageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Page]!
  pageTypes(where: PageTypeWhereInput, orderBy: PageTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PageType]!
  websites(where: WebsiteWhereInput, orderBy: WebsiteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Website]!
  languages(where: LanguageWhereInput, orderBy: LanguageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Language]!
  project(where: ProjectWhereUniqueInput!): Project
  pageTranslation(where: PageTranslationWhereUniqueInput!): PageTranslation
  pagePlugin(where: PagePluginWhereUniqueInput!): PagePlugin
  pageTask(where: PageTaskWhereUniqueInput!): PageTask
  pageChat(where: PageChatWhereUniqueInput!): PageChat
  file(where: FileWhereUniqueInput!): File
  navigation(where: NavigationWhereUniqueInput!): Navigation
  navigationNode(where: NavigationNodeWhereUniqueInput!): NavigationNode
  tag(where: TagWhereUniqueInput!): Tag
  subscriber(where: SubscriberWhereUniqueInput!): Subscriber
  inquiry(where: InquiryWhereUniqueInput!): Inquiry
  datasource(where: DatasourceWhereUniqueInput!): Datasource
  datasourceItem(where: DatasourceItemWhereUniqueInput!): DatasourceItem
  page(where: PageWhereUniqueInput!): Page
  pageType(where: PageTypeWhereUniqueInput!): PageType
  website(where: WebsiteWhereUniqueInput!): Website
  language(where: LanguageWhereUniqueInput!): Language
  projectsConnection(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectConnection!
  pageTranslationsConnection(where: PageTranslationWhereInput, orderBy: PageTranslationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PageTranslationConnection!
  pagePluginsConnection(where: PagePluginWhereInput, orderBy: PagePluginOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PagePluginConnection!
  pageTasksConnection(where: PageTaskWhereInput, orderBy: PageTaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PageTaskConnection!
  pageChatsConnection(where: PageChatWhereInput, orderBy: PageChatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PageChatConnection!
  filesConnection(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FileConnection!
  navigationsConnection(where: NavigationWhereInput, orderBy: NavigationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NavigationConnection!
  navigationNodesConnection(where: NavigationNodeWhereInput, orderBy: NavigationNodeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NavigationNodeConnection!
  tagsConnection(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TagConnection!
  subscribersConnection(where: SubscriberWhereInput, orderBy: SubscriberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SubscriberConnection!
  inquiriesConnection(where: InquiryWhereInput, orderBy: InquiryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InquiryConnection!
  datasourcesConnection(where: DatasourceWhereInput, orderBy: DatasourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DatasourceConnection!
  datasourceItemsConnection(where: DatasourceItemWhereInput, orderBy: DatasourceItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DatasourceItemConnection!
  pagesConnection(where: PageWhereInput, orderBy: PageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PageConnection!
  pageTypesConnection(where: PageTypeWhereInput, orderBy: PageTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PageTypeConnection!
  websitesConnection(where: WebsiteWhereInput, orderBy: WebsiteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WebsiteConnection!
  languagesConnection(where: LanguageWhereInput, orderBy: LanguageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LanguageConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscriber implements Node {
  id: ID!
  email: String!
  url: String
  createdAt: DateTime!
  ip: String
}

"""A connection to a list of items."""
type SubscriberConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SubscriberEdge]!
  aggregate: AggregateSubscriber!
}

input SubscriberCreateInput {
  email: String!
  url: String
  ip: String
}

"""An edge in a connection."""
type SubscriberEdge {
  """The item at the end of the edge."""
  node: Subscriber!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SubscriberOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  url_ASC
  url_DESC
  createdAt_ASC
  createdAt_DESC
  ip_ASC
  ip_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SubscriberPreviousValues {
  id: ID!
  email: String!
  url: String
  createdAt: DateTime!
  ip: String
}

type SubscriberSubscriptionPayload {
  mutation: MutationType!
  node: Subscriber
  updatedFields: [String!]
  previousValues: SubscriberPreviousValues
}

input SubscriberSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SubscriberSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubscriberSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubscriberSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SubscriberWhereInput
}

input SubscriberUpdateInput {
  email: String
  url: String
  ip: String
}

input SubscriberWhereInput {
  """Logical AND on all given filters."""
  AND: [SubscriberWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubscriberWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubscriberWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  ip: String

  """All values that are not equal to given value."""
  ip_not: String

  """All values that are contained in given list."""
  ip_in: [String!]

  """All values that are not contained in given list."""
  ip_not_in: [String!]

  """All values less than the given value."""
  ip_lt: String

  """All values less than or equal the given value."""
  ip_lte: String

  """All values greater than the given value."""
  ip_gt: String

  """All values greater than or equal the given value."""
  ip_gte: String

  """All values containing the given string."""
  ip_contains: String

  """All values not containing the given string."""
  ip_not_contains: String

  """All values starting with the given string."""
  ip_starts_with: String

  """All values not starting with the given string."""
  ip_not_starts_with: String

  """All values ending with the given string."""
  ip_ends_with: String

  """All values not ending with the given string."""
  ip_not_ends_with: String
}

input SubscriberWhereUniqueInput {
  id: ID
}

type Subscription {
  project(where: ProjectSubscriptionWhereInput): ProjectSubscriptionPayload
  pageTranslation(where: PageTranslationSubscriptionWhereInput): PageTranslationSubscriptionPayload
  pagePlugin(where: PagePluginSubscriptionWhereInput): PagePluginSubscriptionPayload
  pageTask(where: PageTaskSubscriptionWhereInput): PageTaskSubscriptionPayload
  pageChat(where: PageChatSubscriptionWhereInput): PageChatSubscriptionPayload
  file(where: FileSubscriptionWhereInput): FileSubscriptionPayload
  navigation(where: NavigationSubscriptionWhereInput): NavigationSubscriptionPayload
  navigationNode(where: NavigationNodeSubscriptionWhereInput): NavigationNodeSubscriptionPayload
  tag(where: TagSubscriptionWhereInput): TagSubscriptionPayload
  subscriber(where: SubscriberSubscriptionWhereInput): SubscriberSubscriptionPayload
  inquiry(where: InquirySubscriptionWhereInput): InquirySubscriptionPayload
  datasource(where: DatasourceSubscriptionWhereInput): DatasourceSubscriptionPayload
  datasourceItem(where: DatasourceItemSubscriptionWhereInput): DatasourceItemSubscriptionPayload
  page(where: PageSubscriptionWhereInput): PageSubscriptionPayload
  pageType(where: PageTypeSubscriptionWhereInput): PageTypeSubscriptionPayload
  website(where: WebsiteSubscriptionWhereInput): WebsiteSubscriptionPayload
  language(where: LanguageSubscriptionWhereInput): LanguageSubscriptionPayload
}

type Tag implements Node {
  id: ID!
  website(where: WebsiteWhereInput): Website!
  name: String!
  displayInNavigation: Boolean
  plugins: [String!]!
  color: String!
  pages(where: PageWhereInput, orderBy: PageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Page!]
}

"""A connection to a list of items."""
type TagConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TagEdge]!
  aggregate: AggregateTag!
}

input TagCreateInput {
  name: String!
  displayInNavigation: Boolean
  color: String!
  plugins: TagCreatepluginsInput
  website: WebsiteCreateOneInput!
  pages: PageCreateManyWithoutTagsInput
}

input TagCreateManyWithoutPagesInput {
  create: [TagCreateWithoutPagesInput!]
  connect: [TagWhereUniqueInput!]
}

input TagCreatepluginsInput {
  set: [String!]
}

input TagCreateWithoutPagesInput {
  name: String!
  displayInNavigation: Boolean
  color: String!
  plugins: TagCreatepluginsInput
  website: WebsiteCreateOneInput!
}

"""An edge in a connection."""
type TagEdge {
  """The item at the end of the edge."""
  node: Tag!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TagOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  displayInNavigation_ASC
  displayInNavigation_DESC
  color_ASC
  color_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type TagPreviousValues {
  id: ID!
  name: String!
  displayInNavigation: Boolean
  plugins: [String!]!
  color: String!
}

type TagSubscriptionPayload {
  mutation: MutationType!
  node: Tag
  updatedFields: [String!]
  previousValues: TagPreviousValues
}

input TagSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TagSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TagSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TagSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TagWhereInput
}

input TagUpdateInput {
  name: String
  displayInNavigation: Boolean
  color: String
  plugins: TagUpdatepluginsInput
  website: WebsiteUpdateOneInput
  pages: PageUpdateManyWithoutTagsInput
}

input TagUpdateManyWithoutPagesInput {
  create: [TagCreateWithoutPagesInput!]
  connect: [TagWhereUniqueInput!]
  disconnect: [TagWhereUniqueInput!]
  delete: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutPagesInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutPagesInput!]
}

input TagUpdatepluginsInput {
  set: [String!]
}

input TagUpdateWithoutPagesDataInput {
  name: String
  displayInNavigation: Boolean
  color: String
  plugins: TagUpdatepluginsInput
  website: WebsiteUpdateOneInput
}

input TagUpdateWithWhereUniqueWithoutPagesInput {
  where: TagWhereUniqueInput!
  data: TagUpdateWithoutPagesDataInput!
}

input TagUpsertWithWhereUniqueWithoutPagesInput {
  where: TagWhereUniqueInput!
  update: TagUpdateWithoutPagesDataInput!
  create: TagCreateWithoutPagesInput!
}

input TagWhereInput {
  """Logical AND on all given filters."""
  AND: [TagWhereInput!]

  """Logical OR on all given filters."""
  OR: [TagWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TagWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  displayInNavigation: Boolean

  """All values that are not equal to given value."""
  displayInNavigation_not: Boolean
  color: String

  """All values that are not equal to given value."""
  color_not: String

  """All values that are contained in given list."""
  color_in: [String!]

  """All values that are not contained in given list."""
  color_not_in: [String!]

  """All values less than the given value."""
  color_lt: String

  """All values less than or equal the given value."""
  color_lte: String

  """All values greater than the given value."""
  color_gt: String

  """All values greater than or equal the given value."""
  color_gte: String

  """All values containing the given string."""
  color_contains: String

  """All values not containing the given string."""
  color_not_contains: String

  """All values starting with the given string."""
  color_starts_with: String

  """All values not starting with the given string."""
  color_not_starts_with: String

  """All values ending with the given string."""
  color_ends_with: String

  """All values not ending with the given string."""
  color_not_ends_with: String
  website: WebsiteWhereInput
  pages_every: PageWhereInput
  pages_some: PageWhereInput
  pages_none: PageWhereInput
}

input TagWhereUniqueInput {
  id: ID
}

type Website implements Node {
  id: ID!
  title: String!
  project(where: ProjectWhereInput): Project!
  languages(where: LanguageWhereInput, orderBy: LanguageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Language!]
  defaultLanguage(where: LanguageWhereInput): Language!
  urlMask: String!
  settings: Json!
  pageTypes(where: PageTypeWhereInput, orderBy: PageTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PageType!]
  pages(where: PageWhereInput, orderBy: PageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Page!]
}

"""A connection to a list of items."""
type WebsiteConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WebsiteEdge]!
  aggregate: AggregateWebsite!
}

input WebsiteCreateInput {
  title: String!
  urlMask: String!
  settings: Json
  project: ProjectCreateOneWithoutWebsitesInput!
  languages: LanguageCreateManyInput
  defaultLanguage: LanguageCreateOneInput!
  pageTypes: PageTypeCreateManyWithoutWebsiteInput
  pages: PageCreateManyWithoutWebsiteInput
}

input WebsiteCreateManyWithoutProjectInput {
  create: [WebsiteCreateWithoutProjectInput!]
  connect: [WebsiteWhereUniqueInput!]
}

input WebsiteCreateOneInput {
  create: WebsiteCreateInput
  connect: WebsiteWhereUniqueInput
}

input WebsiteCreateOneWithoutPagesInput {
  create: WebsiteCreateWithoutPagesInput
  connect: WebsiteWhereUniqueInput
}

input WebsiteCreateOneWithoutPageTypesInput {
  create: WebsiteCreateWithoutPageTypesInput
  connect: WebsiteWhereUniqueInput
}

input WebsiteCreateWithoutPagesInput {
  title: String!
  urlMask: String!
  settings: Json
  project: ProjectCreateOneWithoutWebsitesInput!
  languages: LanguageCreateManyInput
  defaultLanguage: LanguageCreateOneInput!
  pageTypes: PageTypeCreateManyWithoutWebsiteInput
}

input WebsiteCreateWithoutPageTypesInput {
  title: String!
  urlMask: String!
  settings: Json
  project: ProjectCreateOneWithoutWebsitesInput!
  languages: LanguageCreateManyInput
  defaultLanguage: LanguageCreateOneInput!
  pages: PageCreateManyWithoutWebsiteInput
}

input WebsiteCreateWithoutProjectInput {
  title: String!
  urlMask: String!
  settings: Json
  languages: LanguageCreateManyInput
  defaultLanguage: LanguageCreateOneInput!
  pageTypes: PageTypeCreateManyWithoutWebsiteInput
  pages: PageCreateManyWithoutWebsiteInput
}

"""An edge in a connection."""
type WebsiteEdge {
  """The item at the end of the edge."""
  node: Website!

  """A cursor for use in pagination."""
  cursor: String!
}

enum WebsiteOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  urlMask_ASC
  urlMask_DESC
  settings_ASC
  settings_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type WebsitePreviousValues {
  id: ID!
  title: String!
  urlMask: String!
  settings: Json!
}

type WebsiteSubscriptionPayload {
  mutation: MutationType!
  node: Website
  updatedFields: [String!]
  previousValues: WebsitePreviousValues
}

input WebsiteSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [WebsiteSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [WebsiteSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WebsiteSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: WebsiteWhereInput
}

input WebsiteUpdateDataInput {
  title: String
  urlMask: String
  settings: Json
  project: ProjectUpdateOneWithoutWebsitesInput
  languages: LanguageUpdateManyInput
  defaultLanguage: LanguageUpdateOneInput
  pageTypes: PageTypeUpdateManyWithoutWebsiteInput
  pages: PageUpdateManyWithoutWebsiteInput
}

input WebsiteUpdateInput {
  title: String
  urlMask: String
  settings: Json
  project: ProjectUpdateOneWithoutWebsitesInput
  languages: LanguageUpdateManyInput
  defaultLanguage: LanguageUpdateOneInput
  pageTypes: PageTypeUpdateManyWithoutWebsiteInput
  pages: PageUpdateManyWithoutWebsiteInput
}

input WebsiteUpdateManyWithoutProjectInput {
  create: [WebsiteCreateWithoutProjectInput!]
  connect: [WebsiteWhereUniqueInput!]
  disconnect: [WebsiteWhereUniqueInput!]
  delete: [WebsiteWhereUniqueInput!]
  update: [WebsiteUpdateWithWhereUniqueWithoutProjectInput!]
  upsert: [WebsiteUpsertWithWhereUniqueWithoutProjectInput!]
}

input WebsiteUpdateOneInput {
  create: WebsiteCreateInput
  connect: WebsiteWhereUniqueInput
  delete: Boolean
  update: WebsiteUpdateDataInput
  upsert: WebsiteUpsertNestedInput
}

input WebsiteUpdateOneWithoutPagesInput {
  create: WebsiteCreateWithoutPagesInput
  connect: WebsiteWhereUniqueInput
  delete: Boolean
  update: WebsiteUpdateWithoutPagesDataInput
  upsert: WebsiteUpsertWithoutPagesInput
}

input WebsiteUpdateOneWithoutPageTypesInput {
  create: WebsiteCreateWithoutPageTypesInput
  connect: WebsiteWhereUniqueInput
  delete: Boolean
  update: WebsiteUpdateWithoutPageTypesDataInput
  upsert: WebsiteUpsertWithoutPageTypesInput
}

input WebsiteUpdateWithoutPagesDataInput {
  title: String
  urlMask: String
  settings: Json
  project: ProjectUpdateOneWithoutWebsitesInput
  languages: LanguageUpdateManyInput
  defaultLanguage: LanguageUpdateOneInput
  pageTypes: PageTypeUpdateManyWithoutWebsiteInput
}

input WebsiteUpdateWithoutPageTypesDataInput {
  title: String
  urlMask: String
  settings: Json
  project: ProjectUpdateOneWithoutWebsitesInput
  languages: LanguageUpdateManyInput
  defaultLanguage: LanguageUpdateOneInput
  pages: PageUpdateManyWithoutWebsiteInput
}

input WebsiteUpdateWithoutProjectDataInput {
  title: String
  urlMask: String
  settings: Json
  languages: LanguageUpdateManyInput
  defaultLanguage: LanguageUpdateOneInput
  pageTypes: PageTypeUpdateManyWithoutWebsiteInput
  pages: PageUpdateManyWithoutWebsiteInput
}

input WebsiteUpdateWithWhereUniqueWithoutProjectInput {
  where: WebsiteWhereUniqueInput!
  data: WebsiteUpdateWithoutProjectDataInput!
}

input WebsiteUpsertNestedInput {
  update: WebsiteUpdateDataInput!
  create: WebsiteCreateInput!
}

input WebsiteUpsertWithoutPagesInput {
  update: WebsiteUpdateWithoutPagesDataInput!
  create: WebsiteCreateWithoutPagesInput!
}

input WebsiteUpsertWithoutPageTypesInput {
  update: WebsiteUpdateWithoutPageTypesDataInput!
  create: WebsiteCreateWithoutPageTypesInput!
}

input WebsiteUpsertWithWhereUniqueWithoutProjectInput {
  where: WebsiteWhereUniqueInput!
  update: WebsiteUpdateWithoutProjectDataInput!
  create: WebsiteCreateWithoutProjectInput!
}

input WebsiteWhereInput {
  """Logical AND on all given filters."""
  AND: [WebsiteWhereInput!]

  """Logical OR on all given filters."""
  OR: [WebsiteWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WebsiteWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  urlMask: String

  """All values that are not equal to given value."""
  urlMask_not: String

  """All values that are contained in given list."""
  urlMask_in: [String!]

  """All values that are not contained in given list."""
  urlMask_not_in: [String!]

  """All values less than the given value."""
  urlMask_lt: String

  """All values less than or equal the given value."""
  urlMask_lte: String

  """All values greater than the given value."""
  urlMask_gt: String

  """All values greater than or equal the given value."""
  urlMask_gte: String

  """All values containing the given string."""
  urlMask_contains: String

  """All values not containing the given string."""
  urlMask_not_contains: String

  """All values starting with the given string."""
  urlMask_starts_with: String

  """All values not starting with the given string."""
  urlMask_not_starts_with: String

  """All values ending with the given string."""
  urlMask_ends_with: String

  """All values not ending with the given string."""
  urlMask_not_ends_with: String
  project: ProjectWhereInput
  languages_every: LanguageWhereInput
  languages_some: LanguageWhereInput
  languages_none: LanguageWhereInput
  defaultLanguage: LanguageWhereInput
  pageTypes_every: PageTypeWhereInput
  pageTypes_some: PageTypeWhereInput
  pageTypes_none: PageTypeWhereInput
  pages_every: PageWhereInput
  pages_some: PageWhereInput
  pages_none: PageWhereInput
}

input WebsiteWhereUniqueInput {
  id: ID
}
