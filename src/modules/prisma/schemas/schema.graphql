# import * from '../../../generated/prisma.graphql'
# import * from './page.graphql'
# import * from './frontend.graphql'

type Mutation {
  # Copied from Prisma schema
  createProject(data: ProjectCreateInput!): Project!
  createPageTranslation(data: PageTranslationCreateInput!): PageTranslation!
  createPagePlugin(data: PagePluginCreateInput!): PagePlugin!
  createPageTask(data: PageTaskCreateInput!):  PageTaskWithUser!
  createPageChat(data: PageChatCreateInput!): PageChat!
  createFile(data: FileCreateInput!): File!
  createNavigation(data: NavigationCreateInput!): Navigation!
  createNavigationNode(data: NavigationNodeCreateInput!): NavigationNode!
  createTag(data: TagCreateInput!): Tag!
  createSubscriber(data: SubscriberCreateInput!): Subscriber!
  createInquiry(data: InquiryCreateInput!): Inquiry!
  createPageType(data: PageTypeCreateInput!): PageType!
  createWebsite(data: WebsiteCreateInput!): Website!
  createLanguage(data: LanguageCreateInput!): Language!
  updateProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
  updatePageTranslation(data: PageTranslationUpdateInput!, where: PageTranslationWhereUniqueInput!): PageTranslation
  updatePagePlugin(data: PagePluginUpdateInput!, where: PagePluginWhereUniqueInput!): PagePlugin
  updatePageTask(data: PageTaskUpdateInput!, where: PageTaskWhereUniqueInput!): PageTaskWithUser
  updatePageChat(data: PageChatUpdateInput!, where: PageChatWhereUniqueInput!): PageChatWithUser
  updateFile(data: FileUpdateInput!, where: FileWhereUniqueInput!): File
  updateNavigation(data: NavigationUpdateInput!, where: NavigationWhereUniqueInput!): Navigation
  updateNavigationNode(data: NavigationNodeUpdateInput!, where: NavigationNodeWhereUniqueInput!): NavigationNode
  updateTag(data: TagUpdateInput!, where: TagWhereUniqueInput!): Tag
  updateSubscriber(data: SubscriberUpdateInput!, where: SubscriberWhereUniqueInput!): Subscriber
  updateInquiry(data: InquiryUpdateInput!, where: InquiryWhereUniqueInput!): Inquiry
  updatePage(data: PageUpdateInput!, where: PageWhereUniqueInput!): Page
  updatePageType(data: PageTypeUpdateInput!, where: PageTypeWhereUniqueInput!): PageType
  updateWebsite(data: WebsiteUpdateInput!, where: WebsiteWhereUniqueInput!): Website
  updateLanguage(data: LanguageUpdateInput!, where: LanguageWhereUniqueInput!): Language
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deletePageTranslation(where: PageTranslationWhereUniqueInput!): PageTranslation
  deletePagePlugin(where: PagePluginWhereUniqueInput!): PagePlugin
  deletePageTask(where: PageTaskWhereUniqueInput!): PageTaskWithUser
  deletePageChat(where: PageChatWhereUniqueInput!): PageChatWithUser
  deleteFile(where: FileWhereUniqueInput!): File
  deleteNavigation(where: NavigationWhereUniqueInput!): Navigation
  deleteNavigationNode(where: NavigationNodeWhereUniqueInput!): NavigationNode
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteSubscriber(where: SubscriberWhereUniqueInput!): Subscriber
  deleteInquiry(where: InquiryWhereUniqueInput!): Inquiry
  deletePage(where: PageWhereUniqueInput!): Page
  deletePageType(where: PageTypeWhereUniqueInput!): PageType
  deleteWebsite(where: WebsiteWhereUniqueInput!): Website
  deleteLanguage(where: LanguageWhereUniqueInput!): Language
  upsertProject(where: ProjectWhereUniqueInput!, create: ProjectCreateInput!, update: ProjectUpdateInput!): Project!
  upsertPageTranslation(where: PageTranslationWhereUniqueInput!, create: PageTranslationCreateInput!, update: PageTranslationUpdateInput!): PageTranslation!
  upsertPagePlugin(where: PagePluginWhereUniqueInput!, create: PagePluginCreateInput!, update: PagePluginUpdateInput!): PagePlugin!
  upsertPageTask(where: PageTaskWhereUniqueInput!, create: PageTaskCreateInput!, update: PageTaskUpdateInput!): PageTaskWithUser!
  upsertPageChat(where: PageChatWhereUniqueInput!, create: PageChatCreateInput!, update: PageChatUpdateInput!): PageChatWithUser!
  upsertFile(where: FileWhereUniqueInput!, create: FileCreateInput!, update: FileUpdateInput!): File!
  upsertNavigation(where: NavigationWhereUniqueInput!, create: NavigationCreateInput!, update: NavigationUpdateInput!): Navigation!
  upsertNavigationNode(where: NavigationNodeWhereUniqueInput!, create: NavigationNodeCreateInput!, update: NavigationNodeUpdateInput!): NavigationNode!
  upsertTag(where: TagWhereUniqueInput!, create: TagCreateInput!, update: TagUpdateInput!): Tag!
  upsertSubscriber(where: SubscriberWhereUniqueInput!, create: SubscriberCreateInput!, update: SubscriberUpdateInput!): Subscriber!
  upsertInquiry(where: InquiryWhereUniqueInput!, create: InquiryCreateInput!, update: InquiryUpdateInput!): Inquiry!
  upsertPage(where: PageWhereUniqueInput!, create: PageCreateInput!, update: PageUpdateInput!): Page!
  upsertPageType(where: PageTypeWhereUniqueInput!, create: PageTypeCreateInput!, update: PageTypeUpdateInput!): PageType!
  upsertWebsite(where: WebsiteWhereUniqueInput!, create: WebsiteCreateInput!, update: WebsiteUpdateInput!): Website!
  upsertLanguage(where: LanguageWhereUniqueInput!, create: LanguageCreateInput!, update: LanguageUpdateInput!): Language!
  updateManyProjects(data: ProjectUpdateInput!, where: ProjectWhereInput): BatchPayload!
  updateManyPageTranslations(data: PageTranslationUpdateInput!, where: PageTranslationWhereInput): BatchPayload!
  updateManyPagePlugins(data: PagePluginUpdateInput!, where: PagePluginWhereInput): BatchPayload!
  updateManyPageTasks(data: PageTaskUpdateInput!, where: PageTaskWhereInput): BatchPayload!
  updateManyPageChats(data: PageChatUpdateInput!, where: PageChatWhereInput): BatchPayload!
  updateManyFiles(data: FileUpdateInput!, where: FileWhereInput): BatchPayload!
  updateManyNavigations(data: NavigationUpdateInput!, where: NavigationWhereInput): BatchPayload!
  updateManyNavigationNodes(data: NavigationNodeUpdateInput!, where: NavigationNodeWhereInput): BatchPayload!
  updateManyTags(data: TagUpdateInput!, where: TagWhereInput): BatchPayload!
  updateManySubscribers(data: SubscriberUpdateInput!, where: SubscriberWhereInput): BatchPayload!
  updateManyInquiries(data: InquiryUpdateInput!, where: InquiryWhereInput): BatchPayload!
  updateManyPages(data: PageUpdateInput!, where: PageWhereInput): BatchPayload!
  updateManyPageTypes(data: PageTypeUpdateInput!, where: PageTypeWhereInput): BatchPayload!
  updateManyWebsites(data: WebsiteUpdateInput!, where: WebsiteWhereInput): BatchPayload!
  updateManyLanguages(data: LanguageUpdateInput!, where: LanguageWhereInput): BatchPayload!
  deleteManyProjects(where: ProjectWhereInput): BatchPayload!
  deleteManyPageTranslations(where: PageTranslationWhereInput): BatchPayload!
  deleteManyPagePlugins(where: PagePluginWhereInput): BatchPayload!
  deleteManyPageTasks(where: PageTaskWhereInput): BatchPayload!
  deleteManyPageChats(where: PageChatWhereInput): BatchPayload!
  deleteManyFiles(where: FileWhereInput): BatchPayload!
  deleteManyNavigations(where: NavigationWhereInput): BatchPayload!
  deleteManyNavigationNodes(where: NavigationNodeWhereInput): BatchPayload!
  deleteManyTags(where: TagWhereInput): BatchPayload!
  deleteManySubscribers(where: SubscriberWhereInput): BatchPayload!
  deleteManyInquiries(where: InquiryWhereInput): BatchPayload!
  deleteManyPages(where: PageWhereInput): BatchPayload!
  deleteManyPageTypes(where: PageTypeWhereInput): BatchPayload!
  deleteManyWebsites(where: WebsiteWhereInput): BatchPayload!
  deleteManyLanguages(where: LanguageWhereInput): BatchPayload!

  # Custom definitions
  createPage(data: CustomPageCreateInput!): Page!
  createNavigationStructure(navigation: ID!, data: [NavigationNodeCreateInput]!): [NavigationNode]!
  savePagePlugin(data: PagePluginCreateInput!): PagePlugin!
}

type User {
  name: String!
  avatar: String!
  email: String!
}

type PageTaskWithUser {
  id: ID!
  pageTranslation(where: PageTranslationWhereInput): PageTranslation!
  done: Boolean!
  name: String!
  description: String!
  updatedAt: DateTime!
  user: User
}

type PageChatWithUser {
  id: ID!
  page(where: PageWhereInput): Page!
  text: String!
  createdAt: DateTime!
  user: User
}

type Query {
  # Copied from Prisma schema
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project]!
  pageTranslations(where: PageTranslationWhereInput, orderBy: PageTranslationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PageTranslation]!
  pagePlugins(where: PagePluginWhereInput, orderBy: PagePluginOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PagePlugin]!
  pageTasks(where: PageTaskWhereInput, orderBy: PageTaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PageTaskWithUser]!
  pageChats(where: PageChatWhereInput, orderBy: PageChatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PageChatWithUser]!
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File]!
  navigations(where: NavigationWhereInput, orderBy: NavigationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Navigation]!
  navigationNodes(where: NavigationNodeWhereInput, orderBy: NavigationNodeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [NavigationNode]!
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag]!
  subscribers(where: SubscriberWhereInput, orderBy: SubscriberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Subscriber]!
  inquiries(where: InquiryWhereInput, orderBy: InquiryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Inquiry]!
  pages(where: PageWhereInput, orderBy: PageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Page]!
  pageTypes(where: PageTypeWhereInput, orderBy: PageTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PageType]!
  websites(where: WebsiteWhereInput, orderBy: WebsiteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Website]!
  languages(where: LanguageWhereInput, orderBy: LanguageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Language]!
  project(where: ProjectWhereUniqueInput!): Project
  pageTranslation(where: PageTranslationWhereUniqueInput!): PageTranslation
  pagePlugin(where: PagePluginWhereUniqueInput!): PagePlugin
  pageTask(where: PageTaskWhereUniqueInput!): PageTask
  pageChat(where: PageChatWhereUniqueInput!): PageChat
  file(where: FileWhereUniqueInput!): File
  navigation(where: NavigationWhereUniqueInput!): Navigation
  navigationNode(where: NavigationNodeWhereUniqueInput!): NavigationNode
  tag(where: TagWhereUniqueInput!): Tag
  subscriber(where: SubscriberWhereUniqueInput!): Subscriber
  inquiry(where: InquiryWhereUniqueInput!): Inquiry
  page(where: PageWhereUniqueInput!): Page
  pageType(where: PageTypeWhereUniqueInput!): PageType
  website(where: WebsiteWhereUniqueInput!): Website
  language(where: LanguageWhereUniqueInput!): Language
  projectsConnection(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectConnection!
  pageTranslationsConnection(where: PageTranslationWhereInput, orderBy: PageTranslationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PageTranslationConnection!
  pagePluginsConnection(where: PagePluginWhereInput, orderBy: PagePluginOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PagePluginConnection!
  pageTasksConnection(where: PageTaskWhereInput, orderBy: PageTaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PageTaskConnection!
  pageChatsConnection(where: PageChatWhereInput, orderBy: PageChatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PageChatConnection!
  filesConnection(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FileConnection!
  navigationsConnection(where: NavigationWhereInput, orderBy: NavigationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NavigationConnection!
  navigationNodesConnection(where: NavigationNodeWhereInput, orderBy: NavigationNodeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NavigationNodeConnection!
  tagsConnection(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TagConnection!
  subscribersConnection(where: SubscriberWhereInput, orderBy: SubscriberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SubscriberConnection!
  inquiriesConnection(where: InquiryWhereInput, orderBy: InquiryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InquiryConnection!
  pagesConnection(where: PageWhereInput, orderBy: PageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PageConnection!
  pageTypesConnection(where: PageTypeWhereInput, orderBy: PageTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PageTypeConnection!
  websitesConnection(where: WebsiteWhereInput, orderBy: WebsiteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WebsiteConnection!
  languagesConnection(where: LanguageWhereInput, orderBy: LanguageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LanguageConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  # Custom definitions
  frontend(where: FrontendWhereInput!): Frontend
  pagesUrls(where: PagesUrlsWhereInput!): [PageUrl]
}

type PageChatWithUserSubscriptionPayload {
  mutation: MutationType!
  node: PageChatWithUser
  updatedFields: [String!]
  previousValues: PageChatPreviousValues
}

type PageTaskWithUserSubscriptionPayload {
  mutation: MutationType!
  node: PageTaskWithUser
  updatedFields: [String!]
  previousValues: PageChatPreviousValues
}


type Subscription {
  # Copied from Prisma schema
  project(where: ProjectSubscriptionWhereInput): ProjectSubscriptionPayload
  pageTranslation(where: PageTranslationSubscriptionWhereInput): PageTranslationSubscriptionPayload
  pagePlugin(where: PagePluginSubscriptionWhereInput): PagePluginSubscriptionPayload
  pageTask(where: PageTaskSubscriptionWhereInput): PageTaskWithUserSubscriptionPayload
  pageChat(where: PageChatSubscriptionWhereInput): PageChatWithUserSubscriptionPayload
  file(where: FileSubscriptionWhereInput): FileSubscriptionPayload
  navigation(where: NavigationSubscriptionWhereInput): NavigationSubscriptionPayload
  navigationNode(where: NavigationNodeSubscriptionWhereInput): NavigationNodeSubscriptionPayload
  tag(where: TagSubscriptionWhereInput): TagSubscriptionPayload
  page(where: PageSubscriptionWhereInput): PageSubscriptionPayload
  pageType(where: PageTypeSubscriptionWhereInput): PageTypeSubscriptionPayload
  website(where: WebsiteSubscriptionWhereInput): WebsiteSubscriptionPayload
  language(where: LanguageSubscriptionWhereInput): LanguageSubscriptionPayload

  # Custom definitions
}
